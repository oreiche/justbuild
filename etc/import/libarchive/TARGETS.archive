{ "config.h":
  { "type": "configure"
  , "arguments_config":
    [ "OS"
    , "TARGET_ARCH"
    , "COMPILER_FAMILY"
    , "DEBUG"
    , "ENABLE_MBEDTLS"
    , "ENABLE_NETTLE"
    , "ENABLE_OPENSSL"
    , "ENABLE_LIBB2"
    , "ENABLE_LZ4"
    , "ENABLE_LZO"
    , "ENABLE_LZMA"
    , "ENABLE_ZSTD"
    , "ENABLE_ZLIB"
    , "ENABLE_BZip2"
    , "ENABLE_LIBXML2"
    , "ENABLE_EXPAT"
    , "ENABLE_PCREPOSIX"
    , "ENABLE_LIBGCC"
    , "ENABLE_CNG"
    , "ENABLE_XATTR"
    , "ENABLE_ACL"
    , "ENABLE_ICONV"
    , "ENABLE_LIBMD"
    , "ENABLE_PCRE"
    , "ENABLE_REGEX"
    , "XATTR_PROVIDER"
    , "ENABLE_RICHACL"
    , "USE_NFS4"
    ]
  , "target": "config_header"
  , "config":
    { "type": "let*"
    , "bindings":
      [ [ "sys_hdrs"
        , [ "zlib.h"
          , "bzlib.h"
          , "lzma.h"
          , "lzo/lzoconf.h"
          , "lzo/lzo1x.h"
          , "blake.h"
          , "lz4.h"
          , "lz4hc.h"
          , "zstd.h"
          , "dirent.h"
          , "sys/ndir.h"
          , "ndir.h"
          , "sys/dir.h"
          , "sys/types.h"
          , "acl/libacl.h"
          , "attr/xattr.h"
          , "ctype.h"
          , "copyfile.h"
          , "direct.h"
          , "dlfcn.h"
          , "errno.h"
          , "ext2fs/ext2_fs.h"
          , "fcntl.h"
          , "grp.h"
          , "inttypes.h"
          , "io.h"
          , "langinfo.h"
          , "limits.h"
          , "linux/types.h"
          , "linux/fiemap.h"
          , "linux/fs.h"
          , "linux/magic.h"
          , "locale.h"
          , "membership.h"
          , "memory.h"
          , "paths.h"
          , "poll.h"
          , "process.h"
          , "pthread.h"
          , "pwd.h"
          , "readpassphrase.h"
          , "regex.h"
          , "signal.h"
          , "spawn.h"
          , "stdarg.h"
          , "stdint.h"
          , "stdlib.h"
          , "string.h"
          , "strings.h"
          , "sys/acl.h"
          , "sys/cdefs.h"
          , "sys/extattr.h"
          , "sys/ioctl.h"
          , "sys/mkdev.h"
          , "sys/mount.h"
          , "sys/param.h"
          , "sys/poll.h"
          , "sys/richacl.h"
          , "sys/select.h"
          , "sys/stat.h"
          , "sys/statfs.h"
          , "sys/statvfs.h"
          , "sys/sysmacros.h"
          , "sys/time.h"
          , "sys/utime.h"
          , "sys/utsname.h"
          , "sys/vfs.h"
          , "sys/wait.h"
          , "sys/xattr.h"
          , "time.h"
          , "unistd.h"
          , "utime.h"
          , "wchar.h"
          , "wctype.h"
          , "windows.h"
          , "wincrypt.h"
          , "winioctl.h"
          , "Bcrypt.h"
          , "mbedtls/aes.h"
          , "mbedtls/md.h"
          , "mbedtls/pkcs5.h"
          , "md5.h"
          , "rmd160.h"
          , "sha1.h"
          , "sha2.h"
          , "ripemd.h"
          , "sha.h"
          , "sha256.h"
          , "sha512.h"
          , "CommonCrypto/CommonDigest.h"
          , "mbedtls/md5.h"
          , "mbedtls/ripemd160.h"
          , "mbedtls/sha1.h"
          , "mbedtls/sha256.h"
          , "mbedtls/sha512.h"
          , "nettle/md5.h"
          , "nettle/ripemd160.h"
          , "nettle/sha.h"
          , "openssl/evp.h"
          , "openssl/opensslv.h"
          , "iconv.h"
          , "localcharset.h"
          , "libxml/xmlreader.h"
          , "libxml/xmlwriter.h"
          , "assert.h"
          , "sys/richacl.h"
          ]
        ]
      , [ "defines1"
        , { "type": "++"
          , "$1":
            [ [ ["__LIBARCHIVE_CONFIG_H_INCLUDED", 1]
              , ["HAVE_LIBZ", {"type": "var", "name": "ENABLE_ZLIB"}]
              , ["HAVE_LIBBZ2", {"type": "var", "name": "ENABLE_BZip2"}]
              , ["HAVE_LIBLZMA", {"type": "var", "name": "ENABLE_LZMA"}]
              , ["HAVE_LIBLZO2", {"type": "var", "name": "ENABLE_LZO"}]
              , ["HAVE_LIBLZ4", {"type": "var", "name": "ENABLE_LZ4"}]
              , [ "HAVE_LIBMBEDCRYPTO"
                , {"type": "var", "name": "ENABLE_MBEDTLS"}
                ]
              , ["HAVE_LIBNETTLE", {"type": "var", "name": "ENABLE_NETTLE"}]
              , ["HAVE_LIBMD", {"type": "var", "name": "ENABLE_LIBMD"}]
              , ["HAVE_LIBCRYPTO", {"type": "var", "name": "ENABLE_OPENSSL"}]
              , ["HAVE_LIBXML2", {"type": "var", "name": "ENABLE_LIBXML2"}]
              , ["HAVE_LIBEXPAT", {"type": "var", "name": "ENABLE_EXPAT"}]
              , [ "HAVE_LIBPCREPOSIX"
                , {"type": "var", "name": "ENABLE_PCREPOSIX"}
                ]
              , ["HAVE_LIBPCRE", {"type": "var", "name": "ENABLE_PCRE"}]
              , ["HAVE_LIBGCC", {"type": "var", "name": "ENABLE_LIBGCC"}]
              , ["HAVE_LIBACL", {"type": "var", "name": "ENABLE_ACL"}]
              , ["HAVE_LIBRICHACL", {"type": "var", "name": "ENABLE_RICHACL"}]
              ]
            , { "type": "case*"
              , "expr": {"type": "var", "name": "OS"}
              , "case":
                [ ["interix", [["_ALL_SOURCE", 1]]]
                , [ "solaris"
                  , [["_POSIX_PTHREAD_SEMANTICS", 1], ["__EXTENSIONS__", 1]]
                  ]
                , ["linux", [["_GNU_SOURCE", 1]]]
                , ["nonstop", [["_TANDEM_SOURCE", 1]]]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_XATTR"}
              , "then":
                { "type": "case*"
                , "expr": {"type": "var", "name": "OS"}
                , "case":
                  [ ["darwin", [["ARCHIVE_XATTR_DARWIN", 1]]]
                  , ["bsd", [["ARCHIVE_XATTR_FREEBSD", 1]]]
                  , ["linux", [["ARCHIVE_XATTR_LINUX", 1]]]
                  ]
                }
              }
            , { "type": "case*"
              , "expr": {"type": "var", "name": "OS"}
              , "case":
                [ [ "darwin"
                  , { "type": "if"
                    , "cond":
                      { "type": "or"
                      , "$1":
                        [ {"type": "var", "name": "ENABLE_ACL"}
                        , {"type": "var", "name": "ENABLE_RICHACL"}
                        ]
                      }
                    , "then": [["ARCHIVE_ACL_DARWIN", 1]]
                    }
                  ]
                , [ "bsd"
                  , { "type": "if"
                    , "cond": {"type": "var", "name": "ENABLE_ACL"}
                    , "then":
                      { "type": "if"
                      , "cond": {"type": "var", "name": "USE_NFS4"}
                      , "then": [["ARCHIVE_ACL_FREEBSD_NFS4"]]
                      , "else": [["ARCHIVE_ACL_FREEBSD"]]
                      }
                    }
                  ]
                , [ "sunos"
                  , { "type": "if"
                    , "cond": {"type": "var", "name": "ENABLE_ACL"}
                    , "then":
                      { "type": "if"
                      , "cond": {"type": "var", "name": "USE_NFS4"}
                      , "then": [["ARCHIVE_ACL_SUNOS_NFS4"]]
                      , "else": [["ARCHIVE_ACL_SUNOS"]]
                      }
                    }
                  ]
                , [ "linux"
                  , [ [ "ARCHIVE_ACL_LIBACL"
                      , {"type": "var", "name": "ENABLE_ACL"}
                      ]
                    , [ "ARCHIVE_ACL_LIBRICHACL"
                      , {"type": "var", "name": "ENABLE_RICHACL"}
                      ]
                    ]
                  ]
                ]
              }
            ]
          }
        ]
      , [ "have_cfile"
        , { "type": "++"
          , "$1":
            [ [ ["HAVE_DIRENT_H", "dirent.h"]
              , ["HAVE_SYS_NDIR_H", "sys/ndir.h"]
              , ["HAVE_NDIR_H", "ndir.h"]
              , ["HAVE_SYS_DIR_H", "sys/dir.h"]
              , ["HAVE_SYS_TYPES_H", "sys/types.h"]
              , ["HAVE_ACL_LIBACL_H", "acl/libacl.h"]
              , ["HAVE_ATTR_XATTR_H", "attr/xattr.h"]
              , ["HAVE_CTYPE_H", "ctype.h"]
              , ["HAVE_COPYFILE_H", "copyfile.h"]
              , ["HAVE_DIRECT_H", "direct.h"]
              , ["HAVE_DLFCN_H", "dlfcn.h"]
              , ["HAVE_ERRNO_H", "errno.h"]
              , ["HAVE_EXT2FS_EXT2_FS_H", "ext2fs/ext2_fs.h"]
              , ["HAVE_FCNTL_H", "fcntl.h"]
              , ["HAVE_GRP_H", "grp.h"]
              , ["HAVE_INTTYPES_H", "inttypes.h"]
              , ["HAVE_IO_H", "io.h"]
              , ["HAVE_LANGINFO_H", "langinfo.h"]
              , ["HAVE_LIMITS_H", "limits.h"]
              , ["HAVE_LINUX_TYPES_H", "linux/types.h"]
              , ["HAVE_LINUX_FIEMAP_H", "linux/fiemap.h"]
              , ["HAVE_LINUX_FS_H", "linux/fs.h"]
              , ["HAVE_LINUX_MAGIC_H", "linux/magic.h"]
              , ["HAVE_LOCALE_H", "locale.h"]
              , ["HAVE_MEMBERSHIP_H", "membership.h"]
              , ["HAVE_MEMORY_H", "memory.h"]
              , ["HAVE_PATHS_H", "paths.h"]
              , ["HAVE_POLL_H", "poll.h"]
              , ["HAVE_PROCESS_H", "process.h"]
              , ["HAVE_PTHREAD_H", "pthread.h"]
              , ["HAVE_PWD_H", "pwd.h"]
              , ["HAVE_READPASSPHRASE_H", "readpassphrase.h"]
              , ["HAVE_REGEX_H", "regex.h"]
              , ["HAVE_SIGNAL_H", "signal.h"]
              , ["HAVE_SPAWN_H", "spawn.h"]
              , ["HAVE_STDARG_H", "stdarg.h"]
              , ["HAVE_STDINT_H", "stdint.h"]
              , ["HAVE_STDLIB_H", "stdlib.h"]
              , ["HAVE_STRING_H", "string.h"]
              , ["HAVE_STRINGS_H", "strings.h"]
              , ["HAVE_SYS_ACL_H", "sys/acl.h"]
              , ["HAVE_SYS_CDEFS_H", "sys/cdefs.h"]
              , ["HAVE_SYS_EXTATTR_H", "sys/extattr.h"]
              , ["HAVE_SYS_IOCTL_H", "sys/ioctl.h"]
              , ["HAVE_SYS_MKDEV_H", "sys/mkdev.h"]
              , ["HAVE_SYS_MOUNT_H", "sys/mount.h"]
              , ["HAVE_SYS_PARAM_H", "sys/param.h"]
              , ["HAVE_SYS_POLL_H", "sys/poll.h"]
              , ["HAVE_SYS_RICHACL_H", "sys/richacl.h"]
              , ["HAVE_SYS_SELECT_H", "sys/select.h"]
              , ["HAVE_SYS_STAT_H", "sys/stat.h"]
              , ["HAVE_SYS_STATFS_H", "sys/statfs.h"]
              , ["HAVE_SYS_STATVFS_H", "sys/statvfs.h"]
              , ["HAVE_SYS_SYSMACROS_H", "sys/sysmacros.h"]
              , ["HAVE_SYS_TIME_H", "sys/time.h"]
              , ["HAVE_SYS_UTIME_H", "sys/utime.h"]
              , ["HAVE_SYS_UTSNAME_H", "sys/utsname.h"]
              , ["HAVE_SYS_VFS_H", "sys/vfs.h"]
              , ["HAVE_SYS_WAIT_H", "sys/wait.h"]
              , ["HAVE_SYS_XATTR_H", "sys/xattr.h"]
              , ["HAVE_TIME_H", "time.h"]
              , ["HAVE_UNISTD_H", "unistd.h"]
              , ["HAVE_UTIME_H", "utime.h"]
              , ["HAVE_WCHAR_H", "wchar.h"]
              , ["HAVE_WCTYPE_H", "wctype.h"]
              , ["HAVE_WINDOWS_H", "windows.h"]
              , ["HAVE_WINCRYPT_H", "wincrypt.h"]
              , ["HAVE_WINIOCTL_H", "winioctl.h"]
              ]
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ZLIB"}
              , "then": [["HAVE_ZLIB_H", "zlib.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_BZip2"}
              , "then": [["HAVE_BZLIB_H", "bzlib.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LZMA"}
              , "then": [["HAVE_LZMA_H", "lzma.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LZO"}
              , "then":
                [ ["HAVE_LZO_LZOCONF_H", "lzo/lzoconf.h"]
                , ["HAVE_LZO_LZO1X_H", "lzo/lzo1x.h"]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LIBB2"}
              , "then": [["HAVE_BLAKE2_H", "blake.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LZ4"}
              , "then": [["HAVE_LZ4_H", "lz4.h"], ["HAVE_LZ4HC_H", "lz4hc.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ZSTD"}
              , "then": [["HAVE_ZSTD_H", "zstd.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_CNG"}
              , "then": [["HAVE_BCRYPT_H", "Bcrypt.h"]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_MBEDTLS"}
              , "then":
                [ ["HAVE_MBEDTLS_AES_H", "mbedtls/aes.h"]
                , ["HAVE_MBEDTLS_MD_H", "mbedtls/md.h"]
                , ["HAVE_MBEDTLS_PKCS5_H", "mbedtls/pkcs5.h"]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_NETTLE"}
              , "then":
                [ ["HAVE_NETTLE_AES_H", "nettle/aes.h"]
                , ["HAVE_NETTLE_HMAC_H", "nettle/hmac.h"]
                , ["HAVE_NETTLE_MD5_H", "nettle/md5.h"]
                , ["HAVE_NETTLE_PBKDF2_H", "nettle/pbkdf2.h"]
                , ["HAVE_NETTLE_RIPEMD160_H", "nettle/ripemd160.h"]
                , ["HAVE_NETTLE_SHA_H", "nettle/sha.h"]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ICONV"}
              , "then":
                [ ["HAVE_ICONV_H", "iconv.h"]
                , ["HAVE_LOCALCHARSET_H", "localcharset.h"]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LIBXML2"}
              , "then":
                [ ["HAVE_LIBXML_XMLREADER_H", "libxml/xmlreader.h"]
                , ["HAVE_LIBXML_XMLWRITER_H", "libxml/xmlwriter.h"]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_EXPAT"}
              , "then": [["HAVE_EXPAT_H", "expat.h"]]
              }
            ]
          }
        ]
      , [ "have_csymbol"
        , { "type": "++"
          , "$1":
            [ { "type": "if"
              , "cond":
                { "type": "and"
                , "$1":
                  [ {"type": "var", "name": "ENABLE_ZLIB"}
                  , { "type": "=="
                    , "$1": {"type": "var", "name": "OS"}
                    , "$2": "windows"
                    }
                  , { "type": "if"
                    , "cond":
                      { "type": "=="
                      , "$1": {"type": "var", "name": "COMPILER_FAMILY"}
                      , "$2": "cygwin"
                      }
                    , "then": false
                    , "else": true
                    }
                  ]
                }
              , "then": [["ZLIB_WINAPI", ["ZLIB_WINAPI", ["zlib.h"]]]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LIBB2"}
              , "then": [["HAVE_LIBB2", ["blake2sp_init", "blake2.h"]]]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ZSTD"}
              , "then":
                [ ["HAVE_LIBZSTD", ["ZSTD_decompressStream", ["zstd.h"]]]
                , [ "HAVE_LIBZSTD_COMPRESSOR"
                  , ["ZSTD_compressStream", ["zstd.h"]]
                  ]
                ]
              }
            , [ [ "HAVE_WORKING_EXT2_IOC_GETFLAGS"
                , ["EXT2_IOC_GETFLAGS", ["sys/ioctl.h", "ext2fs/ext2_fs.h"]]
                ]
              , [ "HAVE_WORKING_FS_IOC_GETFLAGS"
                , ["FS_IOC_GETFLAGS", ["sys/ioctl.h", "linux/fs.h"]]
                ]
              , [ "SAFE_TO_DEFINE_EXTENSIONS"
                , ["__EXTENSIONS__", {"type": "var", "name": "sys_hdrs"}]
                ]
              ]
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ICONV"}
              , "then":
                [ [ "HAVE_LOCALE_CHARSET"
                  , ["locale_charset", {"type": "var", "name": "sys_hdrs"}]
                  ]
                ]
              }
            , [ ["HAVE__CrtSetReportMode", ["_CrtSetReportMode", ["crtdbg.h"]]]
              , [ "HAVE_ARC4RANDOM_BUF"
                , ["arc4random_buf", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_CHFLAGS"
                , ["chflags", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_CHOWN", ["chown", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_CHROOT"
                , ["chroot", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_CTIME_R"
                , ["ctime_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FCHDIR"
                , ["fchdir", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FCHFLAGS"
                , ["fchflags", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FCHMOD"
                , ["fchmod", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FCHOWN"
                , ["fchown", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_FCNTL", ["fcntl", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_FDOPENDIR"
                , ["fdopendir", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_FORK", ["fork", {"type": "var", "name": "sys_hdrs"}]]
              , ["HAVE_FSTAT", ["fstat", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_FSTATAT"
                , ["fstatat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FSTATFS"
                , ["fstatfs", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FSTATVFS"
                , ["fstatvfs", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FTRUNCATE"
                , ["ftruncate", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FUTIMENS"
                , ["futimens", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FUTIMES"
                , ["futimes", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FUTIMESAT"
                , ["futimesat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETEUID"
                , ["geteuid", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETGRGID_R"
                , ["getgrgid_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETGRNAM_R"
                , ["getgrnam_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETPWNAM_R"
                , ["getpwnam_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETPWUID_R"
                , ["getpwuid_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETPID"
                , ["getpid", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GETVFSBYNAME"
                , ["getvfsbyname", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_GMTIME_R"
                , ["gmtime_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_LCHFLAGS"
                , ["lchflags", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_LCHOWN"
                , ["lchown", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_LINK", ["link", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_LINKAT"
                , ["linkat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_LOCALTIME_R"
                , ["localtime_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_LSTAT", ["lstat", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_LUTIMES"
                , ["lutimes", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_MBRTOWC"
                , ["mbrtowc", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_MEMMOVE"
                , ["memmove", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_MKDIR", ["mkdir", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_MKFIFO"
                , ["mkfifo", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_MKNOD", ["mknod", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_MKSTEMP"
                , ["mkstemp", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_NL_LANGINFO"
                , ["nl_langinfo", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_OPENAT"
                , ["openat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_PIPE", ["pipe", {"type": "var", "name": "sys_hdrs"}]]
              , ["HAVE_POLL", ["poll", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_POSIX_SPAWNP"
                , ["posix_spawnp", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_READLINK"
                , ["readlink", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_READPASSPHRASE"
                , ["readpassphrase", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_SELECT"
                , ["select", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_SETENV"
                , ["setenv", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_SETLOCALE"
                , ["setlocale", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_SIGACTION"
                , ["sigaction", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STATFS"
                , ["statfs", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STATVFS"
                , ["statvfs", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRCHR"
                , ["strchr", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRDUP"
                , ["strdup", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRDUP"
                , ["strdup", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRERROR"
                , ["strerror", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRNCPY_S"
                , ["strncpy_s", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRNLEN"
                , ["strnlen", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRRCHR"
                , ["strrchr", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_SYMLINK"
                , ["symlink", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_TIMEGM"
                , ["timegm", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_TZSET", ["tzset", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_UNLINKAT"
                , ["unlinkat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_UNSETENV"
                , ["unsetenv", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_UTIME", ["utime", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_UTIMES"
                , ["utimes", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_UTIMENSAT"
                , ["utimensat", {"type": "var", "name": "sys_hdrs"}]
                ]
              , ["HAVE_VFORK", ["vfork", {"type": "var", "name": "sys_hdrs"}]]
              , [ "HAVE_WCRTOMB"
                , ["wcrtomb", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WCSCMP"
                , ["wcscmp", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WCSCPY"
                , ["wcscpy", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WCSLEN"
                , ["wcslen", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WCTOMB"
                , ["wctomb", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__CTIME64_S"
                , ["_ctime64_s", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__FSEEKI64"
                , ["_fseeki64", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__GET_TIMEZONE"
                , ["_get_timezone", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__GMTIME64_S"
                , ["_gmtime64_s", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__LOCALTIME64_S"
                , ["_localtime64_s", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE__MKGMTIME64"
                , ["_mkgmtime64", {"type": "var", "name": "sys_hdrs"}]
                ]
              ]
            , { "type": "if"
              , "cond":
                { "type": "=="
                , "$1": {"type": "var", "name": "OS"}
                , "$2": "linux"
                }
              , "then": []
              , "else":
                [ [ "HAVE_LCHMOD"
                  , ["lchmod", {"type": "var", "name": "sys_hdrs"}]
                  ]
                ]
              }
            , [ [ "HAVE_CYGWIN_CONV_PATH"
                , ["cygwin_conv_path", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_FSEEKO"
                , ["fseeko", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRERROR_R"
                , ["strerror_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_DECL_STRERROR_R"
                , ["strerror_r", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_STRFTIME"
                , ["strftime", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_VPRINTF"
                , ["vprintf", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WMEMCMP"
                , ["wmemcmp", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WMEMCPY"
                , ["wmemcpy", {"type": "var", "name": "sys_hdrs"}]
                ]
              , [ "HAVE_WMEMMOVE"
                , ["wmemmove", {"type": "var", "name": "sys_hdrs"}]
                ]
              ]
            , [ [ "HAVE_STRUCT_VFSCONF"
                , ["vfsconf", ["sys/typesh", "sys/mount.h"]]
                ]
              , [ "HAVE_STRUCT_XVFSCONF"
                , ["xvfsconf", ["sys/typesh", "sys/mount.h"]]
                ]
              , [ "HAVE_STRUCT_STATFS"
                , ["statfs", ["sys/typesh", "sys/mount.h"]]
                ]
              , ["HAVE_READDIR_R", ["readdir_r", ["dirent.h"]]]
              , ["HAVE_DIRFD", ["dirfd", ["dirent.h"]]]
              , ["HAVE_READLINKAT", ["readlinkat", ["fcntl.h", "unistd.h"]]]
              , ["MAJOR_IN_MKDEV", ["major", ["sys/mkdev.h"]]]
              , ["MAJOR_IN_SYSMACROS", ["major", ["sys/sysmacros.h"]]]
              ]
            , [ ["HAVE_EFTYPE", ["EFTYPE", ["errno.h"]]]
              , ["HAVE_EILSEQ", ["EILSEQ", ["errno.h"]]]
              , ["HAVE_D_MD_ORDER", ["D_MD_ORDER", ["langinfo.h"]]]
              , [ "HAVE_DECL_INT32_MAX"
                , ["INT32_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_INT32_MIN"
                , ["INT32_MIN", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_INT64_MAX"
                , ["INT64_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_INT64_MIN"
                , ["INT64_MIN", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_INTMAX_MAX"
                , ["INTMAX_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_INTMAX_MIN"
                , ["INTMAX_MIN", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_UINT32_MAX"
                , ["UINT32_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_UINT64_MAX"
                , ["UINT64_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_UINTMAX_MAX"
                , ["UINTMAX_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , [ "HAVE_DECL_SIZE_MAX"
                , ["SIZE_MAX", ["limits.h", "stdint.h", "inttypes.h"]]
                ]
              , ["HAVE_DECL_SSIZE_MAX", ["SSIZE_MAX", ["limits.h"]]]
              ]
            , [ [ "HAVE_STRUCT_TM_TM_GMTOFF"
                , [ "((struct tm*)NULL)->tm_gmtoff"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_TM___TM_GMTOFF"
                , [ "((struct tm*)NULL)->__tm_gmtoff"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STATFS_F_NAMEMAX"
                , [ "((struct statfs*)NULL)->f_namemax"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STATFS_F_IOSIZE"
                , [ "((struct statfs*)NULL)->f_iosize"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_BIRTHTIME"
                , [ "((struct stat*)NULL)->st_birthtime"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_BIRTHTIMESPEC_TV_NSEC"
                , [ "((struct stat*)NULL)->st_birthtimespec.tv_nsec"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_MTIMESPEC_TV_NSEC"
                , [ "((struct stat*)NULL)->st_mtimespec.tv_nsec"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_MTIM_TV_NSEC"
                , [ "((struct stat*)NULL)->st_mtim.tv_nsec"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_MTIME_N"
                , [ "((struct stat*)NULL)->st_mtime_n"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_UMTIME"
                , [ "((struct stat*)NULL)->st_umtime"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_MTIME_USEC"
                , [ "((struct stat*)NULL)->st_mtime_usec"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_BLKSIZE"
                , [ "((struct stat*)NULL)->st_blksize"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STAT_ST_FLAGS"
                , [ "((struct stat*)NULL)->st_flags"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "HAVE_STRUCT_STATVFS_F_IOSIZE"
                , [ "((struct statvfs*)NULL)->f_iosize"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              , [ "TIME_WITH_SYS_TIME"
                , [ "((struct tm*)NULL)->tm_sec"
                  , {"type": "var", "name": "sys_hdrs"}
                  ]
                ]
              ]
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LZMA"}
              , "then":
                [ [ "HAVE_LZMA_STREAM_ENCODER_MT"
                  , ["lzma_stream_encoder_mt", ["lzma.h"]]
                  ]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_XATTR"}
              , "then":
                [ [ "HAVE_DECL_EXTATTR_NAMESPACE_USER"
                  , [ "EXTATTR_NAMESPACE_USER"
                    , ["sys/types.h", "sys/extattr.h"]
                    ]
                  ]
                , [ "HAVE_DECL_XATTR_NOFOLLOW"
                  , ["XATTR_NOFOLLOW", ["sys/xattr.h"]]
                  ]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_XATTR"}
              , "then":
                { "type": "case*"
                , "expr": {"type": "var", "name": "OS"}
                , "case":
                  [ [ "darwin"
                    , [ [ "HAVE_FGETXATTR"
                        , ["fgetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_FLISTXATTR"
                        , ["flistxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_FSETXATTR"
                        , ["fsetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_GETXATTR"
                        , ["getxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_LISTXATTR"
                        , ["listxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_SETXATTR"
                        , ["setxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      ]
                    ]
                  , [ "bsd"
                    , [ [ "HAVE_EXTATTR_GET_FD"
                        , [ "extattr_get_fd"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_GET_FILE"
                        , [ "extattr_get_file"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_GET_LINK"
                        , [ "extattr_get_link"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_LIST_FD"
                        , [ "extattr_list_fd"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_LIST_FILE"
                        , [ "extattr_list_file"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_LIST_LINK"
                        , [ "extattr_list_link"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_SET_FD"
                        , [ "extattr_set_fd"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      , [ "HAVE_EXTATTR_SET_LINK"
                        , [ "extattr_set_link"
                          , {"type": "var", "name": "sys_hdrs"}
                          ]
                        ]
                      ]
                    ]
                  , [ "linux"
                    , [ [ "HAVE_FGETXATTR"
                        , ["fgetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_FLISTXATTR"
                        , ["flistxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_FSETXATTR"
                        , ["fsetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_GETXATTR"
                        , ["getxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_LGETXATTR"
                        , ["lgetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_LISTXATTR"
                        , ["listxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_LLISTXATTR"
                        , ["llistxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      , [ "HAVE_LSETXATTR"
                        , ["lsetxattr", {"type": "var", "name": "sys_hdrs"}]
                        ]
                      ]
                    ]
                  ]
                }
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_ACL"}
              , "then":
                [ ["HAVE_ACL", ["acl", {"type": "var", "name": "sys_hdrs"}]]
                , ["HAVE_FACL", ["facl", {"type": "var", "name": "sys_hdrs"}]]
                , [ "HAVE_ACL_T"
                  , ["sizeof(acl_t)", ["sys/types.h", "sys.acl.h"]]
                  ]
                , [ "HAVE_ACL_ENTRY_T"
                  , ["sizeof(acl_entry_t)", ["sys/types.h", "sys.acl.h"]]
                  ]
                , [ "HAVE_ACL_PERMSET_T"
                  , ["sizeof(acl_permset_t)", ["sys/types.h", "sys.acl.h"]]
                  ]
                , [ "HAVE_ACL_TAG_T"
                  , ["sizeof(acl_tag_t)", ["sys/types.h", "sys.acl.h"]]
                  ]
                , ["HAVE_ACLENT_T", ["sizeof(aclent_t)", ["sys/acl.h"]]]
                , ["HAVE_DECL_GETACL", ["GETACL", ["sys/acl.h"]]]
                , ["HAVE_DECL_GETACLCNT", ["GETACLCNT", ["sys/acl.h"]]]
                , ["HAVE_DECL_SETACL", ["SETACL", ["sys/acl.h"]]]
                , ["HAVE_ACE_T", ["sizeof(ace_t)", ["sys/acl.h"]]]
                , ["HAVE_DECL_ACE_GETACL", ["ACE_GETACL", ["sys/acl.h"]]]
                , ["HAVE_DECL_ACE_GETACLCNT", ["ACE_GETACLCNT", ["sys/acl.h"]]]
                , ["HAVE_DECL_ACE_SETACL", ["ACE_SETACL", ["sys/acl.h"]]]
                , [ "HAVE_ACL_ADD_PERM"
                  , ["acl_add_perm", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_CLEAR_PERMS"
                  , ["acl_clear_perms", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_CREATE_ENTRY"
                  , ["acl_create_entry", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_DELETE_DEF_FILE"
                  , [ "acl_delete_def_file"
                    , {"type": "var", "name": "sys_hdrs"}
                    ]
                  ]
                , [ "HAVE_ACL_FREE"
                  , ["acl_free", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_ENTRY"
                  , ["acl_get_entry", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_FD"
                  , ["acl_get_fd", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_FILE"
                  , ["acl_get_file", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_PERMSET"
                  , ["acl_get_permset", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_QUALIFIER"
                  , ["acl_get_qualifier", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_TAG_TYPE"
                  , ["acl_get_tag_type", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_INIT"
                  , ["acl_init", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_FD"
                  , ["acl_set_fd", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_FILE"
                  , ["acl_set_file", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_QUALIFIER"
                  , ["acl_set_qualifier", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_TAG_TYPE"
                  , ["acl_set_tag_type", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_PERM"
                  , ["acl_get_perm", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_ADD_FLAG_NP"
                  , ["acl_add_flag_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_CLEAR_FLAGS_NP"
                  , ["acl_clear_flags_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_BRAND_NP"
                  , ["acl_get_brand_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_ENTRY_TYPE_NP"
                  , [ "acl_get_entry_type_np"
                    , {"type": "var", "name": "sys_hdrs"}
                    ]
                  ]
                , [ "HAVE_ACL_GET_FLAG_NP"
                  , ["acl_get_flag_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_FLAGSET_NP"
                  , ["acl_get_flagset_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_FD_NP"
                  , ["acl_get_fd_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_LINK_NP"
                  , ["acl_get_link_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_GET_PERM_NP"
                  , ["acl_get_perm_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_IS_TRIVIAL_NP"
                  , ["acl_is_trivial_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_ENTRY_TYPE_NP"
                  , [ "acl_set_entry_type_np"
                    , {"type": "var", "name": "sys_hdrs"}
                    ]
                  ]
                , [ "HAVE_ACL_SET_FD_NP"
                  , ["acl_set_fd_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_ACL_SET_LINK_NP"
                  , ["acl_set_link_np", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_MBR_GID_TO_UUID"
                  , ["mbr_gid_to_uuid", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_MBR_UID_TO_UUID"
                  , ["mbr_uid_to_uuid", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_MBR_UUID_TO_ID"
                  , ["mbr_uuid_to_id", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_DECL_ACL_TYPE_EXTENDED"
                  , ["ACL_TYPE_EXTENDED", ["sys/types.h", "sys/acl.h"]]
                  ]
                , [ "HAVE_DECL_ACL_SYNCHRONIZE"
                  , ["ACL_SYNCHRONIZE", ["sys/types.h", "sys/acl.h"]]
                  ]
                , ["HAVE_DECL_ACL_TYPE_NFS4", ["ACL_TYPE_NFS4", ["sys/acl.h"]]]
                , ["HAVE_DECL_ACL_USER", ["ACL_USER", ["sys/acl.h"]]]
                , [ "HAVE_STRUCT_RICHACE"
                  , [ "((struct richace*)NULL)->e_type"
                    , {"type": "var", "name": "sys_hdrs"}
                    ]
                  ]
                , [ "HAVE_STRUCT_RICHACL"
                  , [ "((struct richacl*)NULL)->a_flags"
                    , {"type": "var", "name": "sys_hdrs"}
                    ]
                  ]
                , [ "HAVE_RICHACL_ALLOC"
                  , ["richacl_alloc", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_EQUIV_MODE"
                  , ["richacl_equiv_mode", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_FREE"
                  , ["richacl_free", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_GET_FD"
                  , ["richacl_get_fd", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_GET_FILE"
                  , ["richacl_get_file", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_SET_FD"
                  , ["richacl_set_fd", {"type": "var", "name": "sys_hdrs"}]
                  ]
                , [ "HAVE_RICHACL_SET_FILE"
                  , ["richacl_set_file", {"type": "var", "name": "sys_hdrs"}]
                  ]
                ]
              }
            , [ ["ARCHIVE_CRYPTO_MD5_LIBC", ["archive_md5_ctx", ["md5.h"]]]
              , [ "ARCHIVE_CRYPTO_RMD160_LIBC"
                , ["archive_rmd160_ctx", ["rmd160.h"]]
                ]
              , ["ARCHIVE_CRYPTO_SHA1_LIBC", ["archive_sha1_ctx", ["sha1.h"]]]
              , [ "ARCHIVE_CRYPTO_SHA256_LIBC"
                , ["archive_sha256_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA256_LIBC2"
                , ["archive_sha256_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA256_LIBC3"
                , ["archive_sha256_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA384_LIBC"
                , ["archive_sha384_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA384_LIBC2"
                , ["archive_sha384_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA384_LIBC3"
                , ["archive_sha384_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA512_LIBC"
                , ["archive_sha512_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA512_LIBC2"
                , ["archive_sha512_ctx", ["sha2.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA512_LIBC3"
                , ["archive_sha512_ctx", ["sha2.h"]]
                ]
              ]
            , [ [ "ARCHIVE_CRYPTO_MD5_LIBSYSTEM"
                , ["archive_md5_ctx", ["CommonCrypto/CommonDigest.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA1_LIBSYSTEM"
                , ["archive_sha1_ctx", ["CommonCrypto/CommonDigest.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA256_LIBSYSTEM"
                , ["archive_sha256_ctx", ["CommonCrypto/CommonDigest.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA384_LIBSYSTEM"
                , ["archive_sha384_ctx", ["CommonCrypto/CommonDigest.h"]]
                ]
              , [ "ARCHIVE_CRYPTO_SHA512_LIBSYSTEM"
                , ["archive_sha512_ctx", ["CommonCrypto/CommonDigest.h"]]
                ]
              ]
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_MBEDTLS"}
              , "then":
                [ [ "ARCHIVE_CRYPTO_MD5_MBEDTLS"
                  , ["archive_md5_ctx", ["mbedtls/md5.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_RMD160_MBEDTLS"
                  , ["archive_rmd160_ctx", ["mbedtls/ripemd160.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA1_MBEDTLS"
                  , ["archive_sha1_ctx", ["mbedtls/sha1.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA256_MBEDTLS"
                  , ["archive_sha256_ctx", ["mbedtls/sha256.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA384_MBEDTLS"
                  , ["archive_sha384_ctx", ["mbedtls/sha512.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA512_MBEDTLS"
                  , ["archive_sha512_ctx", ["mbedtls/sha512.h"]]
                  ]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_NETTLE"}
              , "then":
                [ [ "ARCHIVE_CRYPTO_MD5_NETTLE"
                  , ["archive_md5_ctx", ["nettle/md5.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_RMD160_NETTLE"
                  , ["archive_rmd160_ctx", ["nettle/ripemd160.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA1_NETTLE"
                  , ["archive_sha1_ctx", ["nettle/sha.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA256_NETTLE"
                  , ["archive_sha256_ctx", ["nettle/sha.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA384_NETTLE"
                  , ["archive_sha384_ctx", ["nettle/sha.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA512_NETTLE"
                  , ["archive_sha512_ctx", ["nettle/sha.h"]]
                  ]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_OPENSSL"}
              , "then":
                [ [ "ARCHIVE_CRYPTO_MD5_OPENSSL"
                  , [ "archive_md5_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                , [ "ARCHIVE_CRYPTO_RMD160_OPENSSL"
                  , [ "archive_rmd160_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA1_OPENSSL"
                  , [ "archive_sha1_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA256_OPENSSL"
                  , [ "archive_sha256_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA384_OPENSSL"
                  , [ "archive_sha384_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA512_OPENSSL"
                  , [ "archive_sha512_ctx"
                    , ["openssl/evp.h", "openssl/opensslv.h"]
                    ]
                  ]
                ]
              }
            , { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LIBMD"}
              , "then":
                [ ["ARCHIVE_CRYPTO_MD5_LIBMD", ["archive_md5_ctx", ["md5.h"]]]
                , [ "ARCHIVE_CRYPTO_RMD160_LIBMD"
                  , ["archive_rmd160_ctx", ["ripemd.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA1_LIBMD"
                  , ["archive_sha1_ctx", ["sha.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA256_LIBMD"
                  , ["archive_sha256_ctx", ["sha256.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA512_LIBMD"
                  , ["archive_sha512_ctx", ["sha512.h"]]
                  ]
                ]
              }
            , { "type": "if"
              , "cond":
                { "type": "and"
                , "$1":
                  [ { "type": "=="
                    , "$1": {"type": "var", "name": "OS"}
                    , "$2": "windows"
                    }
                  , { "type": "if"
                    , "cond":
                      { "type": "=="
                      , "$1": {"type": "var", "name": "COMPILER_FAMILY"}
                      , "$2": "cygwin"
                      }
                    , "then": false
                    , "else": true
                    }
                  ]
                }
              , "then":
                [ [ "ARCHIVE_CRYPTO_MD5_WIN"
                  , ["CALG_MD5", ["windows.h", "wincrypt.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA1_WIN"
                  , ["CALG_SHA1", ["windows.h", "wincrypt.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA256_WIN"
                  , ["CALG_SHA_256", ["windows.h", "wincrypt.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA384_WIN"
                  , ["CALG_SHA_384", ["windows.h", "wincrypt.h"]]
                  ]
                , [ "ARCHIVE_CRYPTO_SHA512_WIN"
                  , ["CALG_SHA_512", ["windows.h", "wincrypt.h"]]
                  ]
                ]
              }
            ]
          }
        ]
      , [ "have_ctype"
        , [ ["HAVE_INTMAX_T", "intmax_t"]
          , ["HAVE_UINTMAX_T", "uintmax_t"]
          , ["HAVE_UNSIGNED_LONG_LONG_INT", "unsigned long long"]
          , ["HAVE_LONG_LONG_INT", "long long int"]
          , ["HAVE_WCHAR_T", "wchar_t"]
          ]
        ]
      , [ "size_ctype"
        , [ ["SIZEOF_INT", ["int", [1, 2, 4, 8, 16]]]
          , ["SIZEOF_LONG", ["long", [1, 2, 4, 8, 16]]]
          , ["SIZEOF_WCHAR_T", ["wchar_t", [1, 2, 4, 8, 16]]]
          ]
        ]
      , [ "defines"
        , { "type": "++"
          , "$1":
            [ { "type": "if"
              , "cond": {"type": "var", "name": "ENABLE_LZMA"}
              , "then": []
              , "else": [["HAVE_LZMA_STREAM_ENCODER_MT", "0"]]
              }
            , { "type": "if"
              , "cond":
                { "type": "=="
                , "$1": {"type": "var", "name": "OS"}
                , "$2": "windows"
                }
              , "then":
                [ ["id_t", "unsigned long"]
                , ["mode_t", "int"]
                , ["off_t", "long long"]
                , { "type": "case*"
                  , "expr": {"type": "var", "name": "COMPILER_FAMILY"}
                  , "case":
                    [["mingw", [["gid_t", "short"], ["uid_t", "short"]]]]
                  , "default": [["gid_t", "int"], ["uid_t", "int"]]
                  }
                ]
              }
            ]
          }
        ]
      ]
    , "body":
      { "type": "env"
      , "vars":
        [ "defines1"
        , "have_cfile"
        , "have_csymbol"
        , "have_ctype"
        , "size_ctype"
        , "defines"
        ]
      }
    }
  }
, "config_header":
  { "type": ["@", "rules", "CC/auto", "config"]
  , "name": ["config.h"]
  , "guard": ["INCLUDE_archive_config_h__"]
  , "deps":
    [ ["src", "archive_pthread"]
    , ["src", "archive_crypt"]
    , ["src", "archive_zlib"]
    , ["src", "archive_bzip2"]
    , ["src", "archive_lzma"]
    , ["src", "archive_lzo"]
    , ["src", "archive_libb2"]
    , ["src", "archive_lz4"]
    , ["src", "archive_lzstd"]
    , ["src", "archive_mbedtls"]
    , ["src", "archive_nettle"]
    , ["src", "archive_libmd"]
    , ["src", "archive_crypto"]
    , ["src", "archive_libxml2"]
    , ["src", "archive_pcreposix"]
    , ["src", "archive_pcre"]
    , ["src", "archive_regex"]
    , ["src", "archive_libgcc"]
    , ["src", "archive_acl"]
    , ["src", "archive_xattr"]
    , ["src", "archive_richacl"]
    ]
  }
, "libarchive_csources":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs":
    [ "archive_acl.c"
    , "archive_blake2s_ref.c"
    , "archive_blake2sp_ref.c"
    , "archive_check_magic.c"
    , "archive_cmdline.c"
    , "archive_cryptor.c"
    , "archive_digest.c"
    , "archive_disk_acl_darwin.c"
    , "archive_disk_acl_freebsd.c"
    , "archive_disk_acl_linux.c"
    , "archive_disk_acl_sunos.c"
    , "archive_entry.c"
    , "archive_entry_copy_bhfi.c"
    , "archive_entry_copy_stat.c"
    , "archive_entry_link_resolver.c"
    , "archive_entry_sparse.c"
    , "archive_entry_stat.c"
    , "archive_entry_strmode.c"
    , "archive_entry_xattr.c"
    , "archive_getdate.c"
    , "archive_hmac.c"
    , "archive_match.c"
    , "archive_options.c"
    , "archive_pack_dev.c"
    , "archive_pathmatch.c"
    , "archive_ppmd7.c"
    , "archive_ppmd8.c"
    , "archive_random.c"
    , "archive_rb.c"
    , "archive_read.c"
    , "archive_read_add_passphrase.c"
    , "archive_read_append_filter.c"
    , "archive_read_data_into_fd.c"
    , "archive_read_disk_entry_from_file.c"
    , "archive_read_disk_posix.c"
    , "archive_read_disk_set_standard_lookup.c"
    , "archive_read_disk_windows.c"
    , "archive_read_extract.c"
    , "archive_read_extract2.c"
    , "archive_read_open_fd.c"
    , "archive_read_open_file.c"
    , "archive_read_open_filename.c"
    , "archive_read_open_memory.c"
    , "archive_read_set_format.c"
    , "archive_read_set_options.c"
    , "archive_read_support_filter_all.c"
    , "archive_read_support_filter_by_code.c"
    , "archive_read_support_filter_bzip2.c"
    , "archive_read_support_filter_compress.c"
    , "archive_read_support_filter_grzip.c"
    , "archive_read_support_filter_gzip.c"
    , "archive_read_support_filter_lrzip.c"
    , "archive_read_support_filter_lz4.c"
    , "archive_read_support_filter_lzop.c"
    , "archive_read_support_filter_none.c"
    , "archive_read_support_filter_program.c"
    , "archive_read_support_filter_rpm.c"
    , "archive_read_support_filter_uu.c"
    , "archive_read_support_filter_xz.c"
    , "archive_read_support_filter_zstd.c"
    , "archive_read_support_format_7zip.c"
    , "archive_read_support_format_all.c"
    , "archive_read_support_format_ar.c"
    , "archive_read_support_format_by_code.c"
    , "archive_read_support_format_cab.c"
    , "archive_read_support_format_cpio.c"
    , "archive_read_support_format_empty.c"
    , "archive_read_support_format_iso9660.c"
    , "archive_read_support_format_lha.c"
    , "archive_read_support_format_mtree.c"
    , "archive_read_support_format_rar.c"
    , "archive_read_support_format_rar5.c"
    , "archive_read_support_format_raw.c"
    , "archive_read_support_format_tar.c"
    , "archive_read_support_format_warc.c"
    , "archive_read_support_format_xar.c"
    , "archive_read_support_format_zip.c"
    , "archive_string.c"
    , "archive_string_sprintf.c"
    , "archive_util.c"
    , "archive_version_details.c"
    , "archive_virtual.c"
    , "archive_windows.c"
    , "archive_write.c"
    , "archive_write_add_filter.c"
    , "archive_write_add_filter_b64encode.c"
    , "archive_write_add_filter_by_name.c"
    , "archive_write_add_filter_bzip2.c"
    , "archive_write_add_filter_compress.c"
    , "archive_write_add_filter_grzip.c"
    , "archive_write_add_filter_gzip.c"
    , "archive_write_add_filter_lrzip.c"
    , "archive_write_add_filter_lz4.c"
    , "archive_write_add_filter_lzop.c"
    , "archive_write_add_filter_none.c"
    , "archive_write_add_filter_program.c"
    , "archive_write_add_filter_uuencode.c"
    , "archive_write_add_filter_xz.c"
    , "archive_write_add_filter_zstd.c"
    , "archive_write_disk_posix.c"
    , "archive_write_disk_set_standard_lookup.c"
    , "archive_write_disk_windows.c"
    , "archive_write_open_fd.c"
    , "archive_write_open_file.c"
    , "archive_write_open_filename.c"
    , "archive_write_open_memory.c"
    , "archive_write_set_format.c"
    , "archive_write_set_format_7zip.c"
    , "archive_write_set_format_ar.c"
    , "archive_write_set_format_by_name.c"
    , "archive_write_set_format_cpio.c"
    , "archive_write_set_format_cpio_binary.c"
    , "archive_write_set_format_cpio_newc.c"
    , "archive_write_set_format_cpio_odc.c"
    , "archive_write_set_format_filter_by_ext.c"
    , "archive_write_set_format_gnutar.c"
    , "archive_write_set_format_iso9660.c"
    , "archive_write_set_format_mtree.c"
    , "archive_write_set_format_pax.c"
    , "archive_write_set_format_raw.c"
    , "archive_write_set_format_shar.c"
    , "archive_write_set_format_ustar.c"
    , "archive_write_set_format_v7tar.c"
    , "archive_write_set_format_warc.c"
    , "archive_write_set_format_xar.c"
    , "archive_write_set_format_zip.c"
    , "archive_write_set_options.c"
    , "archive_write_set_passphrase.c"
    , "filter_fork_posix.c"
    , "filter_fork_windows.c"
    , "xxhash.c"
    ]
  }
, "libarchive_public_hheaders":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs": ["archive.h", "archive_entry.h"]
  }
, "libarchive_private_hheaders":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs":
    [ "archive_acl_private.h"
    , "archive_blake2.h"
    , "archive_blake2_impl.h"
    , "archive_cmdline_private.h"
    , "archive_crc32.h"
    , "archive_cryptor_private.h"
    , "archive_digest_private.h"
    , "archive_endian.h"
    , "archive_entry_locale.h"
    , "archive_entry_private.h"
    , "archive_getdate.h"
    , "archive_hmac_private.h"
    , "archive_openssl_evp_private.h"
    , "archive_openssl_hmac_private.h"
    , "archive_options_private.h"
    , "archive_pack_dev.h"
    , "archive_pathmatch.h"
    , "archive_platform.h"
    , "archive_platform_acl.h"
    , "archive_platform_xattr.h"
    , "archive_ppmd7_private.h"
    , "archive_ppmd8_private.h"
    , "archive_ppmd_private.h"
    , "archive_private.h"
    , "archive_random_private.h"
    , "archive_rb.h"
    , "archive_read_disk_private.h"
    , "archive_read_private.h"
    , "archive_string.h"
    , "archive_string_composition.h"
    , "archive_windows.h"
    , "archive_write_disk_private.h"
    , "archive_write_private.h"
    , "archive_write_set_format_private.h"
    , "archive_xxhash.h"
    , "filter_fork.h"
    ]
  }
, "libarchive":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["libarchive"]
  , "pure C": ["yes"]
  , "srcs": ["libarchive_csources"]
  , "hdrs": ["libarchive_public_hheaders"]
  , "private-hdrs":
    ["config.h", "libarchive_public_hheaders", "libarchive_private_hheaders"]
  , "deps":
    [ ["src", "archive_pthread"]
    , ["src", "archive_crypt"]
    , ["src", "archive_zlib"]
    , ["src", "archive_bzip2"]
    , ["src", "archive_lzma"]
    , ["src", "archive_lzo"]
    , ["src", "archive_libb2"]
    , ["src", "archive_lz4"]
    , ["src", "archive_lzstd"]
    , ["src", "archive_mbedtls"]
    , ["src", "archive_nettle"]
    , ["src", "archive_libmd"]
    , ["src", "archive_crypto"]
    , ["src", "archive_libxml2"]
    , ["src", "archive_pcreposix"]
    , ["src", "archive_pcre"]
    , ["src", "archive_regex"]
    , ["src", "archive_libgcc"]
    , ["src", "archive_acl"]
    , ["src", "archive_xattr"]
    , ["src", "archive_richacl"]
    , ["src", "archive_hidden_symbols"]
    ]
  }
}
