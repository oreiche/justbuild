{ "grpcxx_sources":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs":
    [ "src/cpp/client/channel_cc.cc"
    , "src/cpp/client/client_callback.cc"
    , "src/cpp/client/client_context.cc"
    , "src/cpp/client/client_interceptor.cc"
    , "src/cpp/client/create_channel.cc"
    , "src/cpp/client/create_channel_internal.cc"
    , "src/cpp/client/create_channel_posix.cc"
    , "src/cpp/common/alarm.cc"
    , "src/cpp/common/channel_arguments.cc"
    , "src/cpp/common/channel_filter.cc"
    , "src/cpp/common/completion_queue_cc.cc"
    , "src/cpp/common/resource_quota_cc.cc"
    , "src/cpp/common/rpc_method.cc"
    , "src/cpp/common/version_cc.cc"
    , "src/cpp/common/validate_service_config.cc"
    , "src/cpp/server/async_generic_service.cc"
    , "src/cpp/server/channel_argument_option.cc"
    , "src/cpp/server/create_default_thread_pool.cc"
    , "src/cpp/server/external_connection_acceptor_impl.cc"
    , "src/cpp/server/health/default_health_check_service.cc"
    , "src/cpp/server/health/health_check_service.cc"
    , "src/cpp/server/health/health_check_service_server_builder_option.cc"
    , "src/cpp/server/server_builder.cc"
    , "src/cpp/server/server_callback.cc"
    , "src/cpp/server/server_cc.cc"
    , "src/cpp/server/server_context.cc"
    , "src/cpp/server/server_posix.cc"
    , "src/cpp/thread_manager/thread_manager.cc"
    , "src/cpp/util/byte_buffer_cc.cc"
    , "src/cpp/util/string_ref.cc"
    , "src/cpp/util/time_cc.cc"
    ]
  }
, "grpcxx_headers":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs":
    [ "src/cpp/client/create_channel_internal.h"
    , "src/cpp/common/channel_filter.h"
    , "src/cpp/server/dynamic_thread_pool.h"
    , "src/cpp/server/external_connection_acceptor_impl.h"
    , "src/cpp/server/health/default_health_check_service.h"
    , "src/cpp/server/thread_pool_interface.h"
    , "src/cpp/thread_manager/thread_manager.h"
    ]
  }
, "grpcxx_public_headers":
  { "type": ["@", "rules", "data", "staged"]
  , "srcs":
    [ ["./", "include/grpc++", "grpc++_public_headers"]
    , ["./", "include/grpcpp", "grpcpp_public_headers"]
    ]
  }
, "grpc":
  { "type": "export"
  , "target": "grpc_internal"
  , "flexible_config":
    [ "OS"
    , "ARCH"
    , "HOST_ARCH"
    , "TARGET_ARCH"
    , "COMPILER_FAMILY"
    , "DEBUG"
    , "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "ENV"
    ]
  }
, "grpc_internal":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc"]
  , "srcs":
    [ "src/core/lib/surface/init.cc"
    , "src/core/plugin_registry/grpc_plugin_registry.cc"
    , "src/core/plugin_registry/grpc_plugin_registry_extra.cc"
    ]
  , "hdrs": [["./", "include/grpc", "grpc_public_headers"]]
  , "deps":
    [ "channel_stack_builder"
    , "config"
    , "exec_ctx"
    , "gpr"
    , "grpc_alts_credentials"
    , "grpc_base"
    , "grpc_client_channel"
    , "grpc_common"
    , "grpc_credentials_util"
    , "grpc_http_filters"
    , "grpc_jwt_credentials"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , "grpc_trace"
    , "http_connect_handshaker"
    , "httpcli"
    , "iomgr_timer"
    , "promise"
    , "ref_counted_ptr"
    , "sockaddr_utils"
    , "tsi_base"
    , "uri_parser"
    , ["src/core", "channel_args"]
    , ["src/core", "channel_init"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "default_event_engine"]
    , ["src/core", "experiments"]
    , ["src/core", "forkable"]
    , ["src/core", "grpc_authorization_base"]
    , ["src/core", "grpc_external_account_credentials"]
    , ["src/core", "grpc_fake_credentials"]
    , ["src/core", "grpc_google_default_credentials"]
    , ["src/core", "grpc_iam_credentials"]
    , ["src/core", "grpc_insecure_credentials"]
    , ["src/core", "grpc_local_credentials"]
    , ["src/core", "grpc_oauth2_credentials"]
    , ["src/core", "grpc_ssl_credentials"]
    , ["src/core", "grpc_tls_credentials"]
    , ["src/core", "grpc_transport_chttp2_alpn"]
    , ["src/core", "httpcli_ssl_credentials"]
    , ["src/core", "init_internally"]
    , ["src/core", "json"]
    , ["src/core", "posix_event_engine_timer_manager"]
    , ["src/core", "ref_counted"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "tcp_connect_handshaker"]
    , ["src/core", "useful"]
    , ["src/core", "grpc_lb_policy_cds"]
    , ["src/core", "grpc_lb_policy_xds_cluster_impl"]
    , ["src/core", "grpc_lb_policy_xds_cluster_manager"]
    , ["src/core", "grpc_lb_policy_xds_cluster_resolver"]
    , ["src/core", "grpc_lb_policy_xds_override_host"]
    , ["src/core", "grpc_lb_policy_xds_wrr_locality"]
    , ["src/core", "grpc_resolver_xds"]
    , ["src/core", "grpc_resolver_c2p"]
    , ["src/core", "grpc_xds_server_config_fetcher"]
    , ["src/core", "grpc_stateful_session_filter"]
    , ["src/core", "channel_creds_registry_init"]
    , ["@", "absl", "absl/base", "core_headers"]
    ]
  }
, "gpr":
  { "type": "export"
  , "target": "gpr_internal"
  , "flexible_config":
    [ "OS"
    , "ARCH"
    , "HOST_ARCH"
    , "TARGET_ARCH"
    , "COMPILER_FAMILY"
    , "DEBUG"
    , "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "ENV"
    ]
  }
, "gpr_internal":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["gpr"]
  , "srcs":
    [ "src/core/lib/gpr/alloc.cc"
    , "src/core/lib/gpr/cpu_iphone.cc"
    , "src/core/lib/gpr/cpu_linux.cc"
    , "src/core/lib/gpr/cpu_posix.cc"
    , "src/core/lib/gpr/cpu_windows.cc"
    , "src/core/lib/gpr/log.cc"
    , "src/core/lib/gpr/log_android.cc"
    , "src/core/lib/gpr/log_linux.cc"
    , "src/core/lib/gpr/log_posix.cc"
    , "src/core/lib/gpr/log_windows.cc"
    , "src/core/lib/gpr/string.cc"
    , "src/core/lib/gpr/string_posix.cc"
    , "src/core/lib/gpr/string_util_windows.cc"
    , "src/core/lib/gpr/string_windows.cc"
    , "src/core/lib/gpr/sync.cc"
    , "src/core/lib/gpr/sync_abseil.cc"
    , "src/core/lib/gpr/sync_posix.cc"
    , "src/core/lib/gpr/sync_windows.cc"
    , "src/core/lib/gpr/time.cc"
    , "src/core/lib/gpr/time_posix.cc"
    , "src/core/lib/gpr/time_precise.cc"
    , "src/core/lib/gpr/time_windows.cc"
    , "src/core/lib/gpr/tmpfile_msys.cc"
    , "src/core/lib/gpr/tmpfile_posix.cc"
    , "src/core/lib/gpr/tmpfile_windows.cc"
    , "src/core/lib/gpr/wrap_memcpy.cc"
    , "src/core/lib/gprpp/crash.cc"
    , "src/core/lib/gprpp/fork.cc"
    , "src/core/lib/gprpp/global_config_env.cc"
    , "src/core/lib/gprpp/host_port.cc"
    , "src/core/lib/gprpp/mpscq.cc"
    , "src/core/lib/gprpp/stat_posix.cc"
    , "src/core/lib/gprpp/stat_windows.cc"
    , "src/core/lib/gprpp/thd_posix.cc"
    , "src/core/lib/gprpp/thd_windows.cc"
    , "src/core/lib/gprpp/time_util.cc"
    ]
  , "hdrs":
    [ ["./", "include/grpc", "gpr_public_headers"]
    , "src/core/lib/gpr/alloc.h"
    , "src/core/lib/gpr/string.h"
    , "src/core/lib/gpr/time_precise.h"
    , "src/core/lib/gpr/tmpfile.h"
    , "src/core/lib/gprpp/crash.h"
    , "src/core/lib/gprpp/fork.h"
    , "src/core/lib/gprpp/global_config.h"
    , "src/core/lib/gprpp/global_config_custom.h"
    , "src/core/lib/gprpp/global_config_env.h"
    , "src/core/lib/gprpp/global_config_generic.h"
    , "src/core/lib/gprpp/host_port.h"
    , "src/core/lib/gprpp/memory.h"
    , "src/core/lib/gprpp/mpscq.h"
    , "src/core/lib/gprpp/stat.h"
    , "src/core/lib/gprpp/sync.h"
    , "src/core/lib/gprpp/thd.h"
    , "src/core/lib/gprpp/time_util.h"
    ]
  , "deps":
    [ "debug_location"
    , ["src/core", "construct_destruct"]
    , ["src/core", "env"]
    , ["src/core", "event_engine_thread_local"]
    , ["src/core", "examine_stack"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "no_destruct"]
    , ["src/core", "strerror"]
    , ["src/core", "tchar"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "base"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/memory", "memory"]
    , ["@", "absl", "absl/random", "random"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "cord"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/synchronization", "synchronization"]
    , ["@", "absl", "absl/time", "time"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "cpp_impl_of":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["cpp_impl_of"]
  , "hdrs": ["src/core/lib/gprpp/cpp_impl_of.h"]
  }
, "grpc_common":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_common"]
  , "deps":
    [ "grpc_base"
    , "census"
    , "grpc_resolver_dns_ares"
    , "grpc_resolver_fake"
    , ["src/core", "grpc_backend_metric_filter"]
    , ["src/core", "grpc_deadline_filter"]
    , ["src/core", "grpc_client_authority_filter"]
    , ["src/core", "grpc_lb_policy_grpclb"]
    , ["src/core", "grpc_lb_policy_outlier_detection"]
    , ["src/core", "grpc_lb_policy_pick_first"]
    , ["src/core", "grpc_lb_policy_priority"]
    , ["src/core", "grpc_lb_policy_ring_hash"]
    , ["src/core", "grpc_lb_policy_round_robin"]
    , ["src/core", "grpc_lb_policy_weighted_round_robin"]
    , ["src/core", "grpc_lb_policy_weighted_target"]
    , ["src/core", "grpc_lb_policy_rls"]
    , ["src/core", "grpc_channel_idle_filter"]
    , ["src/core", "grpc_message_size_filter"]
    , ["src/core", "grpc_resolver_binder"]
    , ["src/core", "grpc_resolver_dns_native"]
    , ["src/core", "grpc_resolver_sockaddr"]
    , ["src/core", "grpc_transport_chttp2_client_connector"]
    , ["src/core", "grpc_transport_chttp2_server"]
    , ["src/core", "grpc_transport_inproc"]
    , ["src/core", "grpc_fault_injection_filter"]
    ]
  }
, "grpc_public_hdrs":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_public_hdrs"]
  , "hdrs":
    [ ["./", "include/grpc", "grpc_public_headers"]
    , ["./", "include/grpc", "gpr_public_headers"]
    ]
  }
, "grpc++_public_hdrs":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_public_hdrs"]
  , "hdrs": ["grpcxx_public_headers"]
  , "deps":
    [ "grpc_public_hdrs"
    , ["src/core", "gpr_atm"]
    , ["@", "absl", "absl/synchronization", "synchronization"]
    , ["@", "protobuf", "", "libprotobuf"]
    ]
  }
, "grpc++":
  { "type": "export"
  , "target": "grpc++internal"
  , "flexible_config":
    [ "OS"
    , "ARCH"
    , "HOST_ARCH"
    , "TARGET_ARCH"
    , "COMPILER_FAMILY"
    , "DEBUG"
    , "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "ENV"
    ]
  }
, "grpc++internal":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++"]
  , "hdrs":
    [ "grpcxx_public_headers"
    , "src/cpp/client/secure_credentials.h"
    , "src/cpp/common/secure_auth_context.h"
    , "src/cpp/server/secure_server_credentials.h"
    ]
  , "deps":
    [ "grpc++_base"
    , ["src/core", "gpr_atm"]
    , ["src/core", "slice"]
    , "grpc++_xds_client"
    , "grpc++_xds_server"
    , "grpc++_binder"
    ]
  }
, "grpc++_binder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_binder"]
  , "srcs":
    [ "src/core/ext/transport/binder/client/binder_connector.cc"
    , "src/core/ext/transport/binder/client/channel_create.cc"
    , "src/core/ext/transport/binder/client/channel_create_impl.cc"
    , "src/core/ext/transport/binder/client/connection_id_generator.cc"
    , "src/core/ext/transport/binder/client/endpoint_binder_pool.cc"
    , "src/core/ext/transport/binder/client/jni_utils.cc"
    , "src/core/ext/transport/binder/client/security_policy_setting.cc"
    , "src/core/ext/transport/binder/security_policy/binder_security_policy.cc"
    , "src/core/ext/transport/binder/server/binder_server.cc"
    , "src/core/ext/transport/binder/server/binder_server_credentials.cc"
    , "src/core/ext/transport/binder/transport/binder_transport.cc"
    , "src/core/ext/transport/binder/utils/ndk_binder.cc"
    , "src/core/ext/transport/binder/utils/transport_stream_receiver_impl.cc"
    , "src/core/ext/transport/binder/wire_format/binder_android.cc"
    , "src/core/ext/transport/binder/wire_format/binder_constants.cc"
    , "src/core/ext/transport/binder/wire_format/transaction.cc"
    , "src/core/ext/transport/binder/wire_format/wire_reader_impl.cc"
    , "src/core/ext/transport/binder/wire_format/wire_writer.cc"
    ]
  , "hdrs":
    [ ["./", "include/grpcpp", "grpc++_binder_grpcpp_headers"]
    , "src/core/ext/transport/binder/client/binder_connector.h"
    , "src/core/ext/transport/binder/client/channel_create_impl.h"
    , "src/core/ext/transport/binder/client/connection_id_generator.h"
    , "src/core/ext/transport/binder/client/endpoint_binder_pool.h"
    , "src/core/ext/transport/binder/client/jni_utils.h"
    , "src/core/ext/transport/binder/client/security_policy_setting.h"
    , "src/core/ext/transport/binder/server/binder_server.h"
    , "src/core/ext/transport/binder/transport/binder_stream.h"
    , "src/core/ext/transport/binder/transport/binder_transport.h"
    , "src/core/ext/transport/binder/utils/binder_auto_utils.h"
    , "src/core/ext/transport/binder/utils/ndk_binder.h"
    , "src/core/ext/transport/binder/utils/transport_stream_receiver.h"
    , "src/core/ext/transport/binder/utils/transport_stream_receiver_impl.h"
    , "src/core/ext/transport/binder/wire_format/binder.h"
    , "src/core/ext/transport/binder/wire_format/binder_android.h"
    , "src/core/ext/transport/binder/wire_format/binder_constants.h"
    , "src/core/ext/transport/binder/wire_format/transaction.h"
    , "src/core/ext/transport/binder/wire_format/wire_reader.h"
    , "src/core/ext/transport/binder/wire_format/wire_reader_impl.h"
    , "src/core/ext/transport/binder/wire_format/wire_writer.h"
    ]
  , "deps":
    [ "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "gpr_platform"
    , "grpc"
    , "grpc++_base"
    , "grpc_base"
    , "grpc_client_channel"
    , "grpc_public_hdrs"
    , "orphanable"
    , "ref_counted_ptr"
    , ["src/core", "arena"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_args_preconditioning"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "default_event_engine"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "status_helper"]
    , ["src/core", "transport_fwd"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/cleanup", "cleanup"]
    , ["@", "absl", "absl/container", "flat_hash_map"]
    , ["@", "absl", "absl/hash", "hash"]
    , ["@", "absl", "absl/memory", "memory"]
    , ["@", "absl", "absl/meta", "type_traits"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/synchronization", "synchronization"]
    , ["@", "absl", "absl/time", "time"]
    , ["@", "absl", "absl/types", "variant"]
    ]
  }
, "grpc++_xds_client":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_xds_client"]
  , "srcs": ["src/cpp/client/xds_credentials.cc"]
  , "hdrs": ["src/cpp/client/secure_credentials.h"]
  , "deps":
    [ "exec_ctx"
    , "gpr"
    , "grpc"
    , "grpc++_base"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "grpc++_xds_server":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_xds_server"]
  , "srcs": ["src/cpp/server/xds_server_credentials.cc"]
  , "hdrs":
    [ "src/cpp/server/secure_server_credentials.h"
    , "include/grpcpp/xds_server_builder.h"
    ]
  , "deps": ["gpr", "grpc", "grpc++_base"]
  }
, "census":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["census"]
  , "srcs": ["src/core/ext/filters/census/grpc_context.cc"]
  , "hdrs": [["./", "include/grpc", "census_headers"]]
  , "deps": ["grpc_base"]
  }
, "gpr_platform":
  { "type": ["@", "rules", "CC", "library"]
  , "hdrs":
    [ "include/grpc/impl/codegen/port_platform.h"
    , "include/grpc/support/port_platform.h"
    , ["./", "include/grpc", "gpr_public_headers"]
    ]
  }
, "event_engine_base_hdrs":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["event_engine_base_hdrs"]
  , "hdrs":
    [ ["./", "include/grpc", "grpc_public_headers"]
    , ["./", "include/grpc", "grpc_public_event_engine_headers"]
    ]
  , "deps":
    [ "gpr"
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/time", "time"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "absl", "absl/functional", "any_invocable"]
    ]
  }
, "grpc_base":
  { "type": ["@", "rules", "CC", "library"]
  , "arguments_config": ["ARCH", "TARGET_ARCH"]
  , "name": ["grpc_base"]
  , "srcs":
    [ "src/core/lib/channel/channel_stack.cc"
    , "src/core/lib/channel/channel_stack_builder_impl.cc"
    , "src/core/lib/channel/channel_trace.cc"
    , "src/core/lib/channel/channelz.cc"
    , "src/core/lib/channel/channelz_registry.cc"
    , "src/core/lib/channel/connected_channel.cc"
    , "src/core/lib/channel/promise_based_filter.cc"
    , "src/core/lib/channel/status_util.cc"
    , "src/core/lib/compression/compression.cc"
    , "src/core/lib/compression/compression_internal.cc"
    , "src/core/lib/compression/message_compress.cc"
    , "src/core/lib/iomgr/buffer_list.cc"
    , "src/core/lib/iomgr/call_combiner.cc"
    , "src/core/lib/iomgr/cfstream_handle.cc"
    , "src/core/lib/iomgr/dualstack_socket_posix.cc"
    , "src/core/lib/iomgr/endpoint.cc"
    , "src/core/lib/iomgr/endpoint_cfstream.cc"
    , "src/core/lib/iomgr/endpoint_pair_posix.cc"
    , "src/core/lib/iomgr/endpoint_pair_windows.cc"
    , "src/core/lib/iomgr/error_cfstream.cc"
    , "src/core/lib/iomgr/ev_apple.cc"
    , "src/core/lib/iomgr/ev_epoll1_linux.cc"
    , "src/core/lib/iomgr/ev_poll_posix.cc"
    , "src/core/lib/iomgr/ev_posix.cc"
    , "src/core/lib/iomgr/ev_windows.cc"
    , "src/core/lib/iomgr/fork_posix.cc"
    , "src/core/lib/iomgr/fork_windows.cc"
    , "src/core/lib/iomgr/gethostname_fallback.cc"
    , "src/core/lib/iomgr/gethostname_host_name_max.cc"
    , "src/core/lib/iomgr/gethostname_sysconf.cc"
    , "src/core/lib/iomgr/internal_errqueue.cc"
    , "src/core/lib/iomgr/iocp_windows.cc"
    , "src/core/lib/iomgr/iomgr.cc"
    , "src/core/lib/iomgr/iomgr_posix.cc"
    , "src/core/lib/iomgr/iomgr_posix_cfstream.cc"
    , "src/core/lib/iomgr/iomgr_windows.cc"
    , "src/core/lib/iomgr/load_file.cc"
    , "src/core/lib/iomgr/lockfree_event.cc"
    , "src/core/lib/iomgr/polling_entity.cc"
    , "src/core/lib/iomgr/pollset.cc"
    , "src/core/lib/iomgr/pollset_set_windows.cc"
    , "src/core/lib/iomgr/pollset_windows.cc"
    , "src/core/lib/iomgr/resolve_address.cc"
    , "src/core/lib/iomgr/resolve_address_posix.cc"
    , "src/core/lib/iomgr/resolve_address_windows.cc"
    , "src/core/lib/iomgr/socket_factory_posix.cc"
    , "src/core/lib/iomgr/socket_utils_common_posix.cc"
    , "src/core/lib/iomgr/socket_utils_linux.cc"
    , "src/core/lib/iomgr/socket_utils_posix.cc"
    , "src/core/lib/iomgr/socket_windows.cc"
    , "src/core/lib/iomgr/systemd_utils.cc"
    , "src/core/lib/iomgr/tcp_client.cc"
    , "src/core/lib/iomgr/tcp_client_cfstream.cc"
    , "src/core/lib/iomgr/tcp_client_posix.cc"
    , "src/core/lib/iomgr/tcp_client_windows.cc"
    , "src/core/lib/iomgr/tcp_posix.cc"
    , "src/core/lib/iomgr/tcp_server.cc"
    , "src/core/lib/iomgr/tcp_server_posix.cc"
    , "src/core/lib/iomgr/tcp_server_utils_posix_common.cc"
    , "src/core/lib/iomgr/tcp_server_utils_posix_ifaddrs.cc"
    , "src/core/lib/iomgr/tcp_server_utils_posix_noifaddrs.cc"
    , "src/core/lib/iomgr/tcp_server_windows.cc"
    , "src/core/lib/iomgr/tcp_windows.cc"
    , "src/core/lib/iomgr/unix_sockets_posix.cc"
    , "src/core/lib/iomgr/unix_sockets_posix_noop.cc"
    , "src/core/lib/iomgr/wakeup_fd_eventfd.cc"
    , "src/core/lib/iomgr/wakeup_fd_nospecial.cc"
    , "src/core/lib/iomgr/wakeup_fd_pipe.cc"
    , "src/core/lib/iomgr/wakeup_fd_posix.cc"
    , "src/core/lib/resource_quota/api.cc"
    , "src/core/lib/slice/b64.cc"
    , "src/core/lib/surface/api_trace.cc"
    , "src/core/lib/surface/builtins.cc"
    , "src/core/lib/surface/byte_buffer.cc"
    , "src/core/lib/surface/byte_buffer_reader.cc"
    , "src/core/lib/surface/call.cc"
    , "src/core/lib/surface/call_details.cc"
    , "src/core/lib/surface/call_log_batch.cc"
    , "src/core/lib/surface/call_trace.cc"
    , "src/core/lib/surface/channel.cc"
    , "src/core/lib/surface/channel_ping.cc"
    , "src/core/lib/surface/completion_queue.cc"
    , "src/core/lib/surface/completion_queue_factory.cc"
    , "src/core/lib/surface/event_string.cc"
    , "src/core/lib/surface/lame_client.cc"
    , "src/core/lib/surface/metadata_array.cc"
    , "src/core/lib/surface/server.cc"
    , "src/core/lib/surface/validate_metadata.cc"
    , "src/core/lib/surface/version.cc"
    , "src/core/lib/transport/connectivity_state.cc"
    , "src/core/lib/transport/error_utils.cc"
    , "src/core/lib/transport/metadata_batch.cc"
    , "src/core/lib/transport/parsed_metadata.cc"
    , "src/core/lib/transport/status_conversion.cc"
    , "src/core/lib/transport/timeout_encoding.cc"
    , "src/core/lib/transport/transport.cc"
    , "src/core/lib/transport/transport_op_string.cc"
    , "src/core/lib/iomgr/event_engine_shims/closure.cc"
    , "src/core/lib/iomgr/event_engine_shims/endpoint.cc"
    , "src/core/lib/iomgr/event_engine_shims/tcp_client.cc"
    ]
  , "hdrs":
    [ ["./", "include/grpc", "grpc_public_headers"]
    , ["./", "include/grpc", "grpc_public_event_engine_headers"]
    , "src/core/lib/channel/call_finalization.h"
    , "src/core/lib/channel/call_tracer.h"
    , "src/core/lib/channel/channel_stack.h"
    , "src/core/lib/channel/channel_stack_builder_impl.h"
    , "src/core/lib/channel/channel_trace.h"
    , "src/core/lib/channel/channelz.h"
    , "src/core/lib/channel/channelz_registry.h"
    , "src/core/lib/channel/connected_channel.h"
    , "src/core/lib/channel/context.h"
    , "src/core/lib/channel/promise_based_filter.h"
    , "src/core/lib/channel/status_util.h"
    , "src/core/lib/compression/compression_internal.h"
    , "src/core/lib/compression/message_compress.h"
    , "src/core/lib/iomgr/block_annotate.h"
    , "src/core/lib/iomgr/buffer_list.h"
    , "src/core/lib/iomgr/call_combiner.h"
    , "src/core/lib/iomgr/cfstream_handle.h"
    , "src/core/lib/iomgr/dynamic_annotations.h"
    , "src/core/lib/iomgr/endpoint.h"
    , "src/core/lib/iomgr/endpoint_cfstream.h"
    , "src/core/lib/iomgr/endpoint_pair.h"
    , "src/core/lib/iomgr/error_cfstream.h"
    , "src/core/lib/iomgr/ev_apple.h"
    , "src/core/lib/iomgr/ev_epoll1_linux.h"
    , "src/core/lib/iomgr/ev_poll_posix.h"
    , "src/core/lib/iomgr/ev_posix.h"
    , "src/core/lib/iomgr/gethostname.h"
    , "src/core/lib/iomgr/internal_errqueue.h"
    , "src/core/lib/iomgr/iocp_windows.h"
    , "src/core/lib/iomgr/iomgr.h"
    , "src/core/lib/iomgr/load_file.h"
    , "src/core/lib/iomgr/lockfree_event.h"
    , "src/core/lib/iomgr/nameser.h"
    , "src/core/lib/iomgr/polling_entity.h"
    , "src/core/lib/iomgr/pollset.h"
    , "src/core/lib/iomgr/pollset_set_windows.h"
    , "src/core/lib/iomgr/pollset_windows.h"
    , "src/core/lib/iomgr/python_util.h"
    , "src/core/lib/iomgr/resolve_address.h"
    , "src/core/lib/iomgr/resolve_address_impl.h"
    , "src/core/lib/iomgr/resolve_address_posix.h"
    , "src/core/lib/iomgr/resolve_address_windows.h"
    , "src/core/lib/iomgr/sockaddr.h"
    , "src/core/lib/iomgr/sockaddr_posix.h"
    , "src/core/lib/iomgr/sockaddr_windows.h"
    , "src/core/lib/iomgr/socket_factory_posix.h"
    , "src/core/lib/iomgr/socket_utils_posix.h"
    , "src/core/lib/iomgr/socket_windows.h"
    , "src/core/lib/iomgr/systemd_utils.h"
    , "src/core/lib/iomgr/tcp_client.h"
    , "src/core/lib/iomgr/tcp_client_posix.h"
    , "src/core/lib/iomgr/tcp_posix.h"
    , "src/core/lib/iomgr/tcp_server.h"
    , "src/core/lib/iomgr/tcp_server_utils_posix.h"
    , "src/core/lib/iomgr/tcp_windows.h"
    , "src/core/lib/iomgr/unix_sockets_posix.h"
    , "src/core/lib/iomgr/wakeup_fd_pipe.h"
    , "src/core/lib/iomgr/wakeup_fd_posix.h"
    , "src/core/lib/resource_quota/api.h"
    , "src/core/lib/slice/b64.h"
    , "src/core/lib/surface/api_trace.h"
    , "src/core/lib/surface/builtins.h"
    , "src/core/lib/surface/call.h"
    , "src/core/lib/surface/call_test_only.h"
    , "src/core/lib/surface/call_trace.h"
    , "src/core/lib/surface/channel.h"
    , "src/core/lib/surface/completion_queue.h"
    , "src/core/lib/surface/completion_queue_factory.h"
    , "src/core/lib/surface/event_string.h"
    , "src/core/lib/surface/init.h"
    , "src/core/lib/surface/lame_client.h"
    , "src/core/lib/surface/server.h"
    , "src/core/lib/surface/validate_metadata.h"
    , "src/core/lib/transport/connectivity_state.h"
    , "src/core/lib/transport/error_utils.h"
    , "src/core/lib/transport/metadata_batch.h"
    , "src/core/lib/transport/parsed_metadata.h"
    , "src/core/lib/transport/status_conversion.h"
    , "src/core/lib/transport/timeout_encoding.h"
    , "src/core/lib/transport/transport.h"
    , "src/core/lib/transport/transport_impl.h"
    , "src/core/lib/iomgr/event_engine_shims/closure.h"
    , "src/core/lib/iomgr/event_engine_shims/endpoint.h"
    , "src/core/lib/iomgr/event_engine_shims/tcp_client.h"
    ]
  , "private-ldflags":
    { "type": "case"
    , "expr":
      { "type": "var"
      , "name": "TARGET_ARCH"
      , "default":
        { "type": "var"
        , "name": "ARCH"
        , "default":
          {"type": "fail", "msg": "Required variable 'ARCH' is not set."}
        }
      }
    , "case": {"arm": ["-latomic"]}
    }
  , "deps":
    [ "channel_stack_builder"
    , "config"
    , "cpp_impl_of"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "iomgr_timer"
    , "orphanable"
    , "parse_address"
    , "promise"
    , "ref_counted_ptr"
    , "sockaddr_utils"
    , "stats"
    , "uri_parser"
    , "work_serializer"
    , ["src/core", "activity"]
    , ["src/core", "arena"]
    , ["src/core", "arena_promise"]
    , ["src/core", "atomic_utils"]
    , ["src/core", "basic_join"]
    , ["src/core", "basic_seq"]
    , ["src/core", "bitset"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_args_endpoint_config"]
    , ["src/core", "channel_args_preconditioning"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "channel_init"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "chunked_vector"]
    , ["src/core", "closure"]
    , ["src/core", "context"]
    , ["src/core", "default_event_engine"]
    , ["src/core", "dual_ref_counted"]
    , ["src/core", "error"]
    , ["src/core", "event_engine_common"]
    , ["src/core", "event_engine_shim"]
    , ["src/core", "event_engine_tcp_socket_utils"]
    , ["src/core", "event_engine_trace"]
    , ["src/core", "event_log"]
    , ["src/core", "experiments"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "gpr_manual_constructor"]
    , ["src/core", "gpr_spinlock"]
    , ["src/core", "grpc_sockaddr"]
    , ["src/core", "http2_errors"]
    , ["src/core", "init_internally"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "json"]
    , ["src/core", "map"]
    , ["src/core", "match"]
    , ["src/core", "memory_quota"]
    , ["src/core", "no_destruct"]
    , ["src/core", "notification"]
    , ["src/core", "packed_table"]
    , ["src/core", "pipe"]
    , ["src/core", "poll"]
    , ["src/core", "pollset_set"]
    , ["src/core", "posix_event_engine_base_hdrs"]
    , ["src/core", "promise_status"]
    , ["src/core", "ref_counted"]
    , ["src/core", "resolved_address"]
    , ["src/core", "resource_quota"]
    , ["src/core", "resource_quota_trace"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "slice_cast"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "socket_mutator"]
    , ["src/core", "stats_data"]
    , ["src/core", "status_helper"]
    , ["src/core", "strerror"]
    , ["src/core", "thread_quota"]
    , ["src/core", "time"]
    , ["src/core", "transport_fwd"]
    , ["src/core", "try_join"]
    , ["src/core", "try_seq"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/cleanup", "cleanup"]
    , ["@", "absl", "absl/container", "flat_hash_map"]
    , ["@", "absl", "absl/container", "inlined_vector"]
    , ["@", "absl", "absl/functional", "any_invocable"]
    , ["@", "absl", "absl/functional", "function_ref"]
    , ["@", "absl", "absl/meta", "type_traits"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/time", "time"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "absl", "absl/types", "variant"]
    , ["@", "absl", "absl/utility", "utility"]
    , ["@", "zlib", "", "zlib"]
    ]
  }
, "grpc_security_base":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_security_base"]
  , "srcs":
    [ "src/core/lib/security/context/security_context.cc"
    , "src/core/lib/security/credentials/call_creds_util.cc"
    , "src/core/lib/security/credentials/composite/composite_credentials.cc"
    , "src/core/lib/security/credentials/credentials.cc"
    , "src/core/lib/security/credentials/plugin/plugin_credentials.cc"
    , "src/core/lib/security/security_connector/security_connector.cc"
    , "src/core/lib/security/transport/client_auth_filter.cc"
    , "src/core/lib/security/transport/secure_endpoint.cc"
    , "src/core/lib/security/transport/security_handshaker.cc"
    , "src/core/lib/security/transport/server_auth_filter.cc"
    , "src/core/lib/security/transport/tsi_error.cc"
    ]
  , "hdrs":
    [ ["./", "include/grpc", "grpc_public_headers"]
    , "src/core/lib/security/context/security_context.h"
    , "src/core/lib/security/credentials/call_creds_util.h"
    , "src/core/lib/security/credentials/composite/composite_credentials.h"
    , "src/core/lib/security/credentials/credentials.h"
    , "src/core/lib/security/credentials/plugin/plugin_credentials.h"
    , "src/core/lib/security/security_connector/security_connector.h"
    , "src/core/lib/security/transport/auth_filters.h"
    , "src/core/lib/security/transport/secure_endpoint.h"
    , "src/core/lib/security/transport/security_handshaker.h"
    , "src/core/lib/security/transport/tsi_error.h"
    ]
  , "deps":
    [ "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "handshaker"
    , "promise"
    , "ref_counted_ptr"
    , "stats"
    , "tsi_base"
    , ["src/core", "activity"]
    , ["src/core", "arena"]
    , ["src/core", "arena_promise"]
    , ["src/core", "basic_seq"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "closure"]
    , ["src/core", "context"]
    , ["src/core", "error"]
    , ["src/core", "event_engine_memory_allocator"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "handshaker_factory"]
    , ["src/core", "handshaker_registry"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "memory_quota"]
    , ["src/core", "poll"]
    , ["src/core", "ref_counted"]
    , ["src/core", "resource_quota"]
    , ["src/core", "resource_quota_trace"]
    , ["src/core", "seq"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "stats_data"]
    , ["src/core", "status_helper"]
    , ["src/core", "try_seq"]
    , ["src/core", "unique_type_name"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/container", "inlined_vector"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "tsi_base":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_base"]
  , "srcs":
    [ "src/core/tsi/transport_security.cc"
    , "src/core/tsi/transport_security_grpc.cc"
    ]
  , "hdrs":
    [ "src/core/tsi/transport_security.h"
    , "src/core/tsi/transport_security_grpc.h"
    , "src/core/tsi/transport_security_interface.h"
    ]
  , "deps": ["gpr", "grpc_trace"]
  }
, "alts_util":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["alts_util"]
  , "srcs":
    [ "src/core/lib/security/credentials/alts/check_gcp_environment.cc"
    , "src/core/lib/security/credentials/alts/check_gcp_environment_linux.cc"
    , "src/core/lib/security/credentials/alts/check_gcp_environment_no_op.cc"
    , "src/core/lib/security/credentials/alts/check_gcp_environment_windows.cc"
    , "src/core/lib/security/credentials/alts/grpc_alts_credentials_client_options.cc"
    , "src/core/lib/security/credentials/alts/grpc_alts_credentials_options.cc"
    , "src/core/lib/security/credentials/alts/grpc_alts_credentials_server_options.cc"
    , "src/core/tsi/alts/handshaker/transport_security_common_api.cc"
    ]
  , "hdrs":
    [ ["./", "include/grpc", "grpc_secure_public_headers"]
    , "src/core/lib/security/credentials/alts/check_gcp_environment.h"
    , "src/core/lib/security/credentials/alts/grpc_alts_credentials_options.h"
    , "src/core/tsi/alts/handshaker/transport_security_common_api.h"
    ]
  , "deps":
    [ "gpr"
    , "grpc_public_hdrs"
    , ["src/core/ext/upb-generated", "upb-generated-lib"]
    ]
  }
, "tsi":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi"]
  , "deps":
    [ "gpr"
    , "tsi_alts_frame_protector"
    , "tsi_base"
    , "tsi_fake_credentials"
    , ["src/core", "tsi_local_credentials"]
    , ["src/core", "useful"]
    , ["@", "libssl", "", "ssl"]
    , ["@", "libssl", "", "crypto"]
    , ["third_party/upb", "upb"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "grpc++_base":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_base"]
  , "srcs":
    [ "grpcxx_sources"
    , "src/cpp/client/insecure_credentials.cc"
    , "src/cpp/client/secure_credentials.cc"
    , "src/cpp/common/auth_property_iterator.cc"
    , "src/cpp/common/secure_auth_context.cc"
    , "src/cpp/common/secure_channel_arguments.cc"
    , "src/cpp/common/secure_create_auth_context.cc"
    , "src/cpp/common/tls_certificate_provider.cc"
    , "src/cpp/common/tls_certificate_verifier.cc"
    , "src/cpp/common/tls_credentials_options.cc"
    , "src/cpp/server/insecure_server_credentials.cc"
    , "src/cpp/server/secure_server_credentials.cc"
    ]
  , "hdrs":
    [ "grpcxx_public_headers"
    , "grpcxx_headers"
    , "src/cpp/client/secure_credentials.h"
    , "src/cpp/common/secure_auth_context.h"
    , "src/cpp/server/secure_server_credentials.h"
    ]
  , "deps":
    [ "channel_stack_builder"
    , "config"
    , "exec_ctx"
    , "gpr"
    , "grpc"
    , "grpc++_codegen_proto"
    , "grpc_base"
    , "grpc_credentials_util"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , "grpc_service_config_impl"
    , "grpc_trace"
    , "grpcpp_backend_metric_recorder"
    , "grpcpp_call_metric_recorder"
    , "grpcpp_status"
    , "iomgr_timer"
    , "ref_counted_ptr"
    , ["src/core", "arena"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "channel_init"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "closure"]
    , ["src/core", "default_event_engine"]
    , ["src/core", "env"]
    , ["src/core", "error"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "gpr_manual_constructor"]
    , ["src/core", "grpc_backend_metric_provider"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "grpc_transport_inproc"]
    , ["src/core", "json"]
    , ["src/core", "ref_counted"]
    , ["src/core", "resource_quota"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "socket_mutator"]
    , ["src/core", "status_helper"]
    , ["src/core", "thread_quota"]
    , ["src/core", "time"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/synchronization", "synchronization"]
    , ["@", "absl", "absl/memory", "memory"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "absl", "absl/container", "inlined_vector"]
    , ["third_party/upb", "upb"]
    , ["src/core/ext/upb-generated", "upb-generated-lib"]
    , ["@", "protobuf", "", "libprotobuf"]
    ]
  }
, "grpc++_codegen_proto":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_codegen_proto"]
  , "hdrs":
    [ ["./", "include/grpc++", "grpc++_codegen_proto_headers"]
    , ["./", "include/grpcpp", "grpcpp_codegen_proto_headers"]
    ]
  , "deps":
    [ "grpc++_config_proto"
    , "grpc++_public_hdrs"
    , "grpcpp_status"
    , ["@", "protobuf", "", "libprotobuf"]
    ]
  }
, "grpc++_config_proto":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc++_config_proto"]
  , "hdrs":
    [ ["./", "include/grpc++", "grpc++_config_proto_headers"]
    , ["./", "include/grpcpp", "grpcpp_config_proto_headers"]
    ]
  , "deps": [["@", "protobuf", "", "libprotobuf"]]
  }
, "grpcpp_call_metric_recorder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpcpp_call_metric_recorder"]
  , "hdrs": [["./", "include/grpcpp", "grpcpp_call_metric_recorder_headers"]]
  , "deps":
    [ "grpc++_public_hdrs"
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "grpcpp_backend_metric_recorder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpcpp_backend_metric_recorder"]
  , "srcs": ["src/cpp/server/backend_metric_recorder.cc"]
  , "hdrs":
    [ ["./", "include/grpcpp", "grpcpp_backend_metric_recorder_headers"]
    , "src/cpp/server/backend_metric_recorder.h"
    ]
  , "deps":
    [ "gpr"
    , "grpc++_public_hdrs"
    , "grpc_trace"
    , "grpcpp_call_metric_recorder"
    , ["src/core", "grpc_backend_metric_data"]
    , ["src/core", "grpc_backend_metric_provider"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "work_serializer":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["work_serializer"]
  , "srcs": ["src/core/lib/gprpp/work_serializer.cc"]
  , "hdrs": ["src/core/lib/gprpp/work_serializer.h"]
  , "deps":
    [ "debug_location"
    , "gpr"
    , "grpc_trace"
    , "orphanable"
    , ["@", "absl", "absl/base", "core_headers"]
    ]
  }
, "grpc_trace":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_trace"]
  , "srcs": ["src/core/lib/debug/trace.cc"]
  , "hdrs": ["src/core/lib/debug/trace.h"]
  , "deps": ["gpr", "grpc_public_hdrs"]
  }
, "config":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["config"]
  , "srcs": ["src/core/lib/config/core_configuration.cc"]
  , "hdrs": ["src/core/lib/config/core_configuration.h"]
  , "deps":
    [ "gpr"
    , "grpc_resolver"
    , ["src/core", "certificate_provider_registry"]
    , ["src/core", "channel_args_preconditioning"]
    , ["src/core", "channel_creds_registry"]
    , ["src/core", "channel_init"]
    , ["src/core", "handshaker_registry"]
    , ["src/core", "lb_policy_registry"]
    , ["src/core", "proxy_mapper_registry"]
    , ["src/core", "service_config_parser"]
    ]
  }
, "debug_location":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["debug_location"]
  , "hdrs": ["src/core/lib/gprpp/debug_location.h"]
  }
, "orphanable":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["orphanable"]
  , "hdrs": ["src/core/lib/gprpp/orphanable.h"]
  , "deps":
    [ "debug_location"
    , "gpr_platform"
    , "ref_counted_ptr"
    , ["src/core", "ref_counted"]
    ]
  }
, "promise":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["promise"]
  , "hdrs": ["src/core/lib/promise/promise.h"]
  , "deps":
    [ "gpr_platform"
    , ["src/core", "poll"]
    , ["src/core", "promise_like"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "ref_counted_ptr":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["ref_counted_ptr"]
  , "hdrs": ["src/core/lib/gprpp/ref_counted_ptr.h"]
  , "deps": ["debug_location", "gpr_platform"]
  }
, "handshaker":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["handshaker"]
  , "srcs": ["src/core/lib/transport/handshaker.cc"]
  , "hdrs": ["src/core/lib/transport/handshaker.h"]
  , "deps":
    [ "debug_location"
    , "event_engine_base_hdrs"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "ref_counted_ptr"
    , ["src/core", "channel_args"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "ref_counted"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "status_helper"]
    , ["src/core", "time"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/container", "inlined_vector"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "http_connect_handshaker":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["http_connect_handshaker"]
  , "srcs": ["src/core/lib/transport/http_connect_handshaker.cc"]
  , "hdrs": ["src/core/lib/transport/http_connect_handshaker.h"]
  , "deps":
    [ "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "handshaker"
    , "httpcli"
    , "ref_counted_ptr"
    , ["src/core", "channel_args"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "handshaker_factory"]
    , ["src/core", "handshaker_registry"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "exec_ctx":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["exec_ctx"]
  , "srcs":
    [ "src/core/lib/iomgr/combiner.cc"
    , "src/core/lib/iomgr/exec_ctx.cc"
    , "src/core/lib/iomgr/executor.cc"
    , "src/core/lib/iomgr/iomgr_internal.cc"
    ]
  , "hdrs":
    [ "src/core/lib/iomgr/combiner.h"
    , "src/core/lib/iomgr/exec_ctx.h"
    , "src/core/lib/iomgr/executor.h"
    , "src/core/lib/iomgr/iomgr_internal.h"
    ]
  , "deps":
    [ "debug_location"
    , "gpr"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "gpr_spinlock"]
    , ["src/core", "time"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "sockaddr_utils":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["sockaddr_utils"]
  , "srcs": ["src/core/lib/address_utils/sockaddr_utils.cc"]
  , "hdrs": ["src/core/lib/address_utils/sockaddr_utils.h"]
  , "deps":
    [ "gpr"
    , "uri_parser"
    , ["src/core", "grpc_sockaddr"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "resolved_address"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "iomgr_timer":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["iomgr_timer"]
  , "srcs":
    [ "src/core/lib/iomgr/timer.cc"
    , "src/core/lib/iomgr/timer_generic.cc"
    , "src/core/lib/iomgr/timer_heap.cc"
    , "src/core/lib/iomgr/timer_manager.cc"
    ]
  , "hdrs":
    [ "src/core/lib/iomgr/timer.h"
    , "src/core/lib/iomgr/timer_generic.h"
    , "src/core/lib/iomgr/timer_heap.h"
    , "src/core/lib/iomgr/timer_manager.h"
    , "src/core/lib/iomgr/iomgr.h"
    ]
  , "deps":
    [ "event_engine_base_hdrs"
    , "exec_ctx"
    , "gpr"
    , "gpr_platform"
    , "grpc_trace"
    , ["src/core", "closure"]
    , ["src/core", "gpr_manual_constructor"]
    , ["src/core", "gpr_spinlock"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "time"]
    , ["src/core", "time_averaged_stats"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "uri_parser":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["uri_parser"]
  , "srcs": ["src/core/lib/uri/uri_parser.cc"]
  , "hdrs": ["src/core/lib/uri/uri_parser.h"]
  , "deps":
    [ "gpr"
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "parse_address":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["parse_address"]
  , "srcs":
    [ "src/core/lib/address_utils/parse_address.cc"
    , "src/core/lib/iomgr/grpc_if_nametoindex_posix.cc"
    , "src/core/lib/iomgr/grpc_if_nametoindex_unsupported.cc"
    ]
  , "hdrs":
    [ "src/core/lib/address_utils/parse_address.h"
    , "src/core/lib/iomgr/grpc_if_nametoindex.h"
    ]
  , "deps":
    [ "gpr"
    , "uri_parser"
    , ["src/core", "error"]
    , ["src/core", "grpc_sockaddr"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "resolved_address"]
    , ["src/core", "status_helper"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "backoff":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["backoff"]
  , "srcs": ["src/core/lib/backoff/backoff.cc"]
  , "hdrs": ["src/core/lib/backoff/backoff.h"]
  , "deps":
    [ "gpr_platform"
    , ["src/core", "time"]
    , ["@", "absl", "absl/random", "random"]
    ]
  }
, "stats":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["stats"]
  , "srcs": ["src/core/lib/debug/stats.cc"]
  , "hdrs": ["src/core/lib/debug/stats.h"]
  , "deps":
    [ "gpr"
    , ["src/core", "histogram_view"]
    , ["src/core", "no_destruct"]
    , ["src/core", "stats_data"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "span"]
    ]
  }
, "channel_stack_builder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["channel_stack_builder"]
  , "srcs": ["src/core/lib/channel/channel_stack_builder.cc"]
  , "hdrs": ["src/core/lib/channel/channel_stack_builder.h"]
  , "deps":
    [ "gpr"
    , "ref_counted_ptr"
    , ["src/core", "channel_args"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "transport_fwd"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "grpc_service_config_impl":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_service_config_impl"]
  , "srcs": ["src/core/lib/service_config/service_config_impl.cc"]
  , "hdrs": ["src/core/lib/service_config/service_config_impl.h"]
  , "deps":
    [ "config"
    , "gpr"
    , "ref_counted_ptr"
    , ["src/core", "channel_args"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "json"]
    , ["src/core", "json_args"]
    , ["src/core", "json_object_loader"]
    , ["src/core", "service_config_parser"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "validation_errors"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "server_address":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["server_address"]
  , "srcs": ["src/core/lib/resolver/server_address.cc"]
  , "hdrs": ["src/core/lib/resolver/server_address.h"]
  , "deps":
    [ "gpr_platform"
    , "sockaddr_utils"
    , ["src/core", "channel_args"]
    , ["src/core", "resolved_address"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "grpc_resolver":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_resolver"]
  , "srcs":
    [ "src/core/lib/resolver/resolver.cc"
    , "src/core/lib/resolver/resolver_registry.cc"
    ]
  , "hdrs":
    [ "src/core/lib/resolver/resolver.h"
    , "src/core/lib/resolver/resolver_factory.h"
    , "src/core/lib/resolver/resolver_registry.h"
    ]
  , "deps":
    [ "gpr"
    , "grpc_trace"
    , "orphanable"
    , "ref_counted_ptr"
    , "server_address"
    , "uri_parser"
    , ["src/core", "channel_args"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "iomgr_fwd"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "grpc_client_channel":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_client_channel"]
  , "srcs":
    [ "src/core/ext/filters/client_channel/backend_metric.cc"
    , "src/core/ext/filters/client_channel/backup_poller.cc"
    , "src/core/ext/filters/client_channel/channel_connectivity.cc"
    , "src/core/ext/filters/client_channel/client_channel.cc"
    , "src/core/ext/filters/client_channel/client_channel_channelz.cc"
    , "src/core/ext/filters/client_channel/client_channel_factory.cc"
    , "src/core/ext/filters/client_channel/client_channel_plugin.cc"
    , "src/core/ext/filters/client_channel/client_channel_service_config.cc"
    , "src/core/ext/filters/client_channel/config_selector.cc"
    , "src/core/ext/filters/client_channel/dynamic_filters.cc"
    , "src/core/ext/filters/client_channel/global_subchannel_pool.cc"
    , "src/core/ext/filters/client_channel/health/health_check_client.cc"
    , "src/core/ext/filters/client_channel/http_proxy.cc"
    , "src/core/ext/filters/client_channel/lb_policy/child_policy_handler.cc"
    , "src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.cc"
    , "src/core/ext/filters/client_channel/local_subchannel_pool.cc"
    , "src/core/ext/filters/client_channel/retry_filter.cc"
    , "src/core/ext/filters/client_channel/retry_service_config.cc"
    , "src/core/ext/filters/client_channel/retry_throttle.cc"
    , "src/core/ext/filters/client_channel/service_config_channel_arg_filter.cc"
    , "src/core/ext/filters/client_channel/subchannel.cc"
    , "src/core/ext/filters/client_channel/subchannel_pool_interface.cc"
    , "src/core/ext/filters/client_channel/subchannel_stream_client.cc"
    ]
  , "hdrs":
    [ "src/core/ext/filters/client_channel/backend_metric.h"
    , "src/core/ext/filters/client_channel/backup_poller.h"
    , "src/core/ext/filters/client_channel/client_channel.h"
    , "src/core/ext/filters/client_channel/client_channel_channelz.h"
    , "src/core/ext/filters/client_channel/client_channel_factory.h"
    , "src/core/ext/filters/client_channel/client_channel_service_config.h"
    , "src/core/ext/filters/client_channel/config_selector.h"
    , "src/core/ext/filters/client_channel/connector.h"
    , "src/core/ext/filters/client_channel/dynamic_filters.h"
    , "src/core/ext/filters/client_channel/global_subchannel_pool.h"
    , "src/core/ext/filters/client_channel/health/health_check_client.h"
    , "src/core/ext/filters/client_channel/http_proxy.h"
    , "src/core/ext/filters/client_channel/lb_call_state_internal.h"
    , "src/core/ext/filters/client_channel/lb_policy/child_policy_handler.h"
    , "src/core/ext/filters/client_channel/lb_policy/oob_backend_metric.h"
    , "src/core/ext/filters/client_channel/lb_policy/oob_backend_metric_internal.h"
    , "src/core/ext/filters/client_channel/local_subchannel_pool.h"
    , "src/core/ext/filters/client_channel/retry_filter.h"
    , "src/core/ext/filters/client_channel/retry_service_config.h"
    , "src/core/ext/filters/client_channel/retry_throttle.h"
    , "src/core/ext/filters/client_channel/subchannel.h"
    , "src/core/ext/filters/client_channel/subchannel_interface_internal.h"
    , "src/core/ext/filters/client_channel/subchannel_pool_interface.h"
    , "src/core/ext/filters/client_channel/subchannel_stream_client.h"
    ]
  , "deps":
    [ "backoff"
    , "channel_stack_builder"
    , "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_resolver"
    , "grpc_service_config_impl"
    , "grpc_trace"
    , "http_connect_handshaker"
    , "iomgr_timer"
    , "orphanable"
    , ["@", "protobuf", "", "libprotobuf"]
    , "ref_counted_ptr"
    , "server_address"
    , "sockaddr_utils"
    , "stats"
    , "uri_parser"
    , "work_serializer"
    , ["src/core", "arena"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "channel_init"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "closure"]
    , ["src/core", "construct_destruct"]
    , ["src/core", "dual_ref_counted"]
    , ["src/core", "env"]
    , ["src/core", "error"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "grpc_backend_metric_data"]
    , ["src/core", "grpc_deadline_filter"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "init_internally"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "json"]
    , ["src/core", "json_args"]
    , ["src/core", "json_channel_args"]
    , ["src/core", "json_object_loader"]
    , ["src/core", "lb_policy"]
    , ["src/core", "lb_policy_registry"]
    , ["src/core", "memory_quota"]
    , ["src/core", "pollset_set"]
    , ["src/core", "proxy_mapper"]
    , ["src/core", "proxy_mapper_registry"]
    , ["src/core", "ref_counted"]
    , ["src/core", "resolved_address"]
    , ["src/core", "resource_quota"]
    , ["src/core", "service_config_parser"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "stats_data"]
    , ["src/core", "status_helper"]
    , ["src/core", "subchannel_interface"]
    , ["src/core", "time"]
    , ["src/core", "transport_fwd"]
    , ["src/core", "unique_type_name"]
    , ["src/core", "useful"]
    , ["src/core", "validation_errors"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/container", "inlined_vector"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "cord"]
    , ["@", "absl", "absl/synchronization", "synchronization"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "absl", "absl/types", "variant"]
    , ["third_party/upb", "upb"]
    , ["src/core/ext/upb-generated", "upb-generated-lib"]
    ]
  }
, "grpc_resolver_dns_ares":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_resolver_dns_ares"]
  , "srcs":
    [ "src/core/ext/filters/client_channel/resolver/dns/c_ares/dns_resolver_ares.cc"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_posix.cc"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver_windows.cc"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.cc"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_posix.cc"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper_windows.cc"
    ]
  , "hdrs":
    [ "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_ev_driver.h"
    , "src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.h"
    ]
  , "deps":
    [ "backoff"
    , "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_grpclb_balancer_addresses"
    , "grpc_resolver"
    , "grpc_service_config_impl"
    , "grpc_trace"
    , "iomgr_timer"
    , "orphanable"
    , "parse_address"
    , "ref_counted_ptr"
    , "server_address"
    , "sockaddr_utils"
    , "uri_parser"
    , ["src/core", "channel_args"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "event_engine_common"]
    , ["src/core", "grpc_resolver_dns_selection"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "grpc_sockaddr"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "iomgr_port"]
    , ["src/core", "json"]
    , ["src/core", "polling_resolver"]
    , ["src/core", "pollset_set"]
    , ["src/core", "resolved_address"]
    , ["src/core", "slice"]
    , ["src/core", "status_helper"]
    , ["src/core", "time"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/container", "flat_hash_set"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "cares", "", "ares"]
    , ["third_party", "address_sorting"]
    ]
  }
, "httpcli":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["httpcli"]
  , "srcs":
    [ "src/core/lib/http/format_request.cc"
    , "src/core/lib/http/httpcli.cc"
    , "src/core/lib/http/parser.cc"
    ]
  , "hdrs":
    [ "src/core/lib/http/format_request.h"
    , "src/core/lib/http/httpcli.h"
    , "src/core/lib/http/parser.h"
    ]
  , "deps":
    [ "config"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , "grpc_trace"
    , "handshaker"
    , "orphanable"
    , "ref_counted_ptr"
    , "sockaddr_utils"
    , "uri_parser"
    , ["src/core", "channel_args"]
    , ["src/core", "channel_args_preconditioning"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "handshaker_registry"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "pollset_set"]
    , ["src/core", "resolved_address"]
    , ["src/core", "resource_quota"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "status_helper"]
    , ["src/core", "tcp_connect_handshaker"]
    , ["src/core", "time"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/functional", "bind_front"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "grpc_alts_credentials":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_alts_credentials"]
  , "srcs":
    [ "src/core/lib/security/credentials/alts/alts_credentials.cc"
    , "src/core/lib/security/security_connector/alts/alts_security_connector.cc"
    ]
  , "hdrs":
    [ "src/core/lib/security/credentials/alts/alts_credentials.h"
    , "src/core/lib/security/security_connector/alts/alts_security_connector.h"
    ]
  , "deps":
    [ "alts_util"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , "handshaker"
    , "promise"
    , "ref_counted_ptr"
    , "tsi_alts_credentials"
    , "tsi_base"
    , ["src/core", "arena_promise"]
    , ["src/core", "channel_args"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "unique_type_name"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "tsi_fake_credentials":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_fake_credentials"]
  , "srcs": ["src/core/tsi/fake_transport_security.cc"]
  , "hdrs": ["src/core/tsi/fake_transport_security.h"]
  , "deps": ["gpr", "tsi_base", ["src/core", "slice"], ["src/core", "useful"]]
  }
, "grpc_jwt_credentials":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_jwt_credentials"]
  , "srcs":
    [ "src/core/lib/security/credentials/jwt/json_token.cc"
    , "src/core/lib/security/credentials/jwt/jwt_credentials.cc"
    , "src/core/lib/security/credentials/jwt/jwt_verifier.cc"
    ]
  , "hdrs":
    [ "src/core/lib/security/credentials/jwt/json_token.h"
    , "src/core/lib/security/credentials/jwt/jwt_credentials.h"
    , "src/core/lib/security/credentials/jwt/jwt_verifier.h"
    ]
  , "deps":
    [ "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_credentials_util"
    , "grpc_security_base"
    , "grpc_trace"
    , "httpcli"
    , "orphanable"
    , "promise"
    , "ref_counted_ptr"
    , "uri_parser"
    , ["src/core", "arena_promise"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "gpr_manual_constructor"]
    , ["src/core", "httpcli_ssl_credentials"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "json"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "time"]
    , ["src/core", "tsi_ssl_types"]
    , ["src/core", "unique_type_name"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/time", "time"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "libssl", "", "crypto"]
    , ["@", "libssl", "", "ssl"]
    ]
  }
, "grpc_credentials_util":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_credentials_util"]
  , "srcs":
    [ "src/core/lib/security/credentials/tls/tls_utils.cc"
    , "src/core/lib/security/security_connector/load_system_roots_fallback.cc"
    , "src/core/lib/security/security_connector/load_system_roots_supported.cc"
    , "src/core/lib/security/util/json_util.cc"
    ]
  , "hdrs":
    [ "src/core/lib/security/credentials/tls/tls_utils.h"
    , "src/core/lib/security/security_connector/load_system_roots.h"
    , "src/core/lib/security/security_connector/load_system_roots_supported.h"
    , "src/core/lib/security/util/json_util.h"
    ]
  , "deps":
    [ "gpr"
    , "grpc_base"
    , "grpc_security_base"
    , ["src/core", "error"]
    , ["src/core", "json"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "tsi_alts_credentials":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_alts_credentials"]
  , "srcs":
    [ "src/core/tsi/alts/handshaker/alts_handshaker_client.cc"
    , "src/core/tsi/alts/handshaker/alts_shared_resource.cc"
    , "src/core/tsi/alts/handshaker/alts_tsi_handshaker.cc"
    , "src/core/tsi/alts/handshaker/alts_tsi_utils.cc"
    ]
  , "hdrs":
    [ "src/core/tsi/alts/handshaker/alts_handshaker_client.h"
    , "src/core/tsi/alts/handshaker/alts_shared_resource.h"
    , "src/core/tsi/alts/handshaker/alts_tsi_handshaker.h"
    , "src/core/tsi/alts/handshaker/alts_tsi_handshaker_private.h"
    , "src/core/tsi/alts/handshaker/alts_tsi_utils.h"
    ]
  , "deps":
    [ "alts_util"
    , "gpr"
    , "grpc_base"
    , "grpc_security_base"
    , "tsi_alts_frame_protector"
    , "tsi_base"
    , ["src/core", "channel_args"]
    , ["src/core", "closure"]
    , ["src/core", "pollset_set"]
    , ["src/core", "slice"]
    , ["third_party/upb", "upb"]
    , ["src/core/ext/upb-generated", "upb-generated-lib"]
    ]
  }
, "tsi_alts_frame_protector":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_alts_frame_protector"]
  , "srcs":
    [ "src/core/tsi/alts/crypt/aes_gcm.cc"
    , "src/core/tsi/alts/crypt/gsec.cc"
    , "src/core/tsi/alts/frame_protector/alts_counter.cc"
    , "src/core/tsi/alts/frame_protector/alts_crypter.cc"
    , "src/core/tsi/alts/frame_protector/alts_frame_protector.cc"
    , "src/core/tsi/alts/frame_protector/alts_record_protocol_crypter_common.cc"
    , "src/core/tsi/alts/frame_protector/alts_seal_privacy_integrity_crypter.cc"
    , "src/core/tsi/alts/frame_protector/alts_unseal_privacy_integrity_crypter.cc"
    , "src/core/tsi/alts/frame_protector/frame_handler.cc"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_integrity_only_record_protocol.cc"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_privacy_integrity_record_protocol.cc"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_record_protocol_common.cc"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_iovec_record_protocol.cc"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_zero_copy_grpc_protector.cc"
    ]
  , "hdrs":
    [ "src/core/tsi/alts/crypt/gsec.h"
    , "src/core/tsi/alts/frame_protector/alts_counter.h"
    , "src/core/tsi/alts/frame_protector/alts_crypter.h"
    , "src/core/tsi/alts/frame_protector/alts_frame_protector.h"
    , "src/core/tsi/alts/frame_protector/alts_record_protocol_crypter_common.h"
    , "src/core/tsi/alts/frame_protector/frame_handler.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_integrity_only_record_protocol.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_privacy_integrity_record_protocol.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_record_protocol.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_grpc_record_protocol_common.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_iovec_record_protocol.h"
    , "src/core/tsi/alts/zero_copy_frame_protector/alts_zero_copy_grpc_protector.h"
    ]
  , "deps":
    [ "event_engine_base_hdrs"
    , "exec_ctx"
    , "gpr"
    , "gpr_platform"
    , "tsi_base"
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "useful"]
    , ["@", "libssl", "", "crypto"]
    , ["@", "libssl", "", "ssl"]
    ]
  }
, "tsi_ssl_session_cache":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_ssl_session_cache"]
  , "srcs":
    [ "src/core/tsi/ssl/session_cache/ssl_session_boringssl.cc"
    , "src/core/tsi/ssl/session_cache/ssl_session_cache.cc"
    , "src/core/tsi/ssl/session_cache/ssl_session_openssl.cc"
    ]
  , "hdrs":
    [ "src/core/tsi/ssl/session_cache/ssl_session.h"
    , "src/core/tsi/ssl/session_cache/ssl_session_cache.h"
    ]
  , "deps":
    [ "cpp_impl_of"
    , "gpr"
    , "grpc_public_hdrs"
    , ["src/core", "ref_counted"]
    , ["src/core", "slice"]
    , ["@", "absl", "absl/memory", "memory"]
    , ["@", "libssl", "", "ssl"]
    ]
  }
, "tsi_ssl_credentials":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["tsi_ssl_credentials"]
  , "srcs":
    [ "src/core/lib/security/security_connector/ssl_utils.cc"
    , "src/core/lib/security/security_connector/ssl_utils_config.cc"
    , "src/core/tsi/ssl/key_logging/ssl_key_logging.cc"
    , "src/core/tsi/ssl_transport_security.cc"
    , "src/core/tsi/ssl_transport_security_utils.cc"
    ]
  , "hdrs":
    [ "src/core/lib/security/security_connector/ssl_utils.h"
    , "src/core/lib/security/security_connector/ssl_utils_config.h"
    , "src/core/tsi/ssl/key_logging/ssl_key_logging.h"
    , "src/core/tsi/ssl_transport_security.h"
    , "src/core/tsi/ssl_transport_security_utils.h"
    ]
  , "deps":
    [ "gpr"
    , "grpc_base"
    , "grpc_credentials_util"
    , "grpc_public_hdrs"
    , "grpc_security_base"
    , "ref_counted_ptr"
    , "tsi_base"
    , "tsi_ssl_session_cache"
    , ["src/core", "channel_args"]
    , ["src/core", "error"]
    , ["src/core", "grpc_transport_chttp2_alpn"]
    , ["src/core", "ref_counted"]
    , ["src/core", "slice"]
    , ["src/core", "tsi_ssl_types"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "libssl", "", "crypto"]
    , ["@", "libssl", "", "ssl"]
    ]
  }
, "grpc_http_filters":
  { "type": ["@", "rules", "CC", "library"]
  , "arguments_config": ["COMPILER_FAMILY"]
  , "name": ["grpc_http_filters"]
  , "private-cflags":
    { "type": "case"
    , "expr": {"type": "var", "name": "COMPILER_FAMILY", "default": "unknown"}
    , "case": {"gnu": ["-Wno-array-bounds"]}
    }
  , "srcs":
    [ "src/core/ext/filters/http/client/http_client_filter.cc"
    , "src/core/ext/filters/http/http_filters_plugin.cc"
    , "src/core/ext/filters/http/message_compress/compression_filter.cc"
    , "src/core/ext/filters/http/server/http_server_filter.cc"
    ]
  , "hdrs":
    [ "src/core/ext/filters/http/client/http_client_filter.h"
    , "src/core/ext/filters/http/message_compress/compression_filter.h"
    , "src/core/ext/filters/http/server/http_server_filter.h"
    ]
  , "deps":
    [ "channel_stack_builder"
    , "config"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "promise"
    , ["src/core", "activity"]
    , ["src/core", "arena"]
    , ["src/core", "arena_promise"]
    , ["src/core", "channel_args"]
    , ["src/core", "channel_fwd"]
    , ["src/core", "channel_init"]
    , ["src/core", "channel_stack_type"]
    , ["src/core", "context"]
    , ["src/core", "grpc_message_size_filter"]
    , ["src/core", "latch"]
    , ["src/core", "map"]
    , ["src/core", "percent_encoding"]
    , ["src/core", "pipe"]
    , ["src/core", "poll"]
    , ["src/core", "race"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "transport_fwd"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/meta", "type_traits"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "grpc_grpclb_balancer_addresses":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_grpclb_balancer_addresses"]
  , "srcs":
    [ "src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.cc"
    ]
  , "hdrs":
    [ "src/core/ext/filters/client_channel/lb_policy/grpclb/grpclb_balancer_addresses.h"
    ]
  , "deps":
    [ "gpr_platform"
    , "grpc_public_hdrs"
    , "server_address"
    , ["src/core", "channel_args"]
    , ["src/core", "useful"]
    ]
  }
, "xds_client":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["xds_client"]
  , "srcs":
    [ "src/core/ext/xds/xds_api.cc"
    , "src/core/ext/xds/xds_bootstrap.cc"
    , "src/core/ext/xds/xds_client.cc"
    , "src/core/ext/xds/xds_client_stats.cc"
    ]
  , "hdrs":
    [ "src/core/ext/xds/xds_api.h"
    , "src/core/ext/xds/xds_bootstrap.h"
    , "src/core/ext/xds/xds_channel_args.h"
    , "src/core/ext/xds/xds_client.h"
    , "src/core/ext/xds/xds_client_stats.h"
    , "src/core/ext/xds/xds_resource_type.h"
    , "src/core/ext/xds/xds_resource_type_impl.h"
    , "src/core/ext/xds/xds_transport.h"
    ]
  , "proto": [["@", "google_apis", "", "google_rpc_status_proto"]]
  , "deps":
    [ "backoff"
    , "debug_location"
    , "event_engine_base_hdrs"
    , "exec_ctx"
    , "gpr"
    , "grpc_trace"
    , "orphanable"
    , ["@", "protobuf", "", "libprotobuf"]
    , "ref_counted_ptr"
    , "uri_parser"
    , "work_serializer"
    , ["src/core", "default_event_engine"]
    , ["src/core", "dual_ref_counted"]
    , ["src/core", "env"]
    , ["src/core", "json"]
    , ["src/core", "ref_counted"]
    , ["src/core", "time"]
    , ["src/core", "upb_utils"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/memory", "memory"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    , ["third_party/upb", "upb"]
    , ["third_party/upb", "upb_textformat"]
    , ["third_party/upb", "upb_json"]
    , ["third_party/upb", "upb_reflection"]
    , ["src/core/ext/upb-generated", "upb-generated-lib"]
    , ["src/core/ext/upbdefs-generated", "upbdefs-generated-lib"]
    ]
  }
, "grpc_resolver_fake":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_resolver_fake"]
  , "srcs":
    ["src/core/ext/filters/client_channel/resolver/fake/fake_resolver.cc"]
  , "hdrs":
    ["src/core/ext/filters/client_channel/resolver/fake/fake_resolver.h"]
  , "deps":
    [ "config"
    , "debug_location"
    , "gpr"
    , "grpc_public_hdrs"
    , "grpc_resolver"
    , "orphanable"
    , "ref_counted_ptr"
    , "server_address"
    , "uri_parser"
    , "work_serializer"
    , ["src/core", "channel_args"]
    , ["src/core", "grpc_service_config"]
    , ["src/core", "ref_counted"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/status", "statusor"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "chttp2_frame":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["chttp2_frame"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/frame.h"]
  , "deps": ["gpr"]
  }
, "http_trace":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["http_trace"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/http_trace.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/http_trace.h"]
  , "deps": ["gpr_platform", "grpc_trace"]
  }
, "hpack_parser_table":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["hpack_parser_table"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/hpack_parser_table.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/hpack_parser_table.h"]
  , "deps":
    [ "gpr"
    , "gpr_platform"
    , "grpc_base"
    , "grpc_trace"
    , "http_trace"
    , ["src/core", "error"]
    , ["src/core", "hpack_constants"]
    , ["src/core", "no_destruct"]
    , ["src/core", "slice"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    ]
  }
, "hpack_parser":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["hpack_parser"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/hpack_parser.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/hpack_parser.h"]
  , "deps":
    [ "chttp2_frame"
    , "gpr"
    , "gpr_platform"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "hpack_parser_table"
    , "stats"
    , ["src/core", "decode_huff"]
    , ["src/core", "error"]
    , ["src/core", "hpack_constants"]
    , ["src/core", "slice"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "stats_data"]
    , ["src/core", "status_helper"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    , ["@", "absl", "absl/types", "span"]
    , ["@", "absl", "absl/types", "variant"]
    ]
  }
, "hpack_encoder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["hpack_encoder"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/hpack_encoder.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/hpack_encoder.h"]
  , "deps":
    [ "chttp2_bin_encoder"
    , "chttp2_frame"
    , "chttp2_varint"
    , "gpr"
    , "gpr_platform"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "http_trace"
    , ["src/core", "hpack_constants"]
    , ["src/core", "hpack_encoder_table"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "time"]
    , ["@", "absl", "absl/strings", "strings"]
    ]
  }
, "chttp2_bin_encoder":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["chttp2_bin_encoder"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/bin_encoder.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/bin_encoder.h"]
  , "deps":
    ["gpr", "gpr_platform", ["src/core", "huffsyms"], ["src/core", "slice"]]
  }
, "chttp2_varint":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["chttp2_varint"]
  , "srcs": ["src/core/ext/transport/chttp2/transport/varint.cc"]
  , "hdrs": ["src/core/ext/transport/chttp2/transport/varint.h"]
  , "deps": ["gpr", ["@", "absl", "absl/base", "core_headers"]]
  }
, "grpc_transport_chttp2":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpc_transport_chttp2"]
  , "srcs":
    [ "src/core/ext/transport/chttp2/transport/bin_decoder.cc"
    , "src/core/ext/transport/chttp2/transport/chttp2_transport.cc"
    , "src/core/ext/transport/chttp2/transport/context_list.cc"
    , "src/core/ext/transport/chttp2/transport/frame_data.cc"
    , "src/core/ext/transport/chttp2/transport/frame_goaway.cc"
    , "src/core/ext/transport/chttp2/transport/frame_ping.cc"
    , "src/core/ext/transport/chttp2/transport/frame_rst_stream.cc"
    , "src/core/ext/transport/chttp2/transport/frame_settings.cc"
    , "src/core/ext/transport/chttp2/transport/frame_window_update.cc"
    , "src/core/ext/transport/chttp2/transport/parsing.cc"
    , "src/core/ext/transport/chttp2/transport/stream_lists.cc"
    , "src/core/ext/transport/chttp2/transport/stream_map.cc"
    , "src/core/ext/transport/chttp2/transport/writing.cc"
    ]
  , "hdrs":
    [ "src/core/ext/transport/chttp2/transport/bin_decoder.h"
    , "src/core/ext/transport/chttp2/transport/chttp2_transport.h"
    , "src/core/ext/transport/chttp2/transport/context_list.h"
    , "src/core/ext/transport/chttp2/transport/frame_data.h"
    , "src/core/ext/transport/chttp2/transport/frame_goaway.h"
    , "src/core/ext/transport/chttp2/transport/frame_ping.h"
    , "src/core/ext/transport/chttp2/transport/frame_rst_stream.h"
    , "src/core/ext/transport/chttp2/transport/frame_settings.h"
    , "src/core/ext/transport/chttp2/transport/frame_window_update.h"
    , "src/core/ext/transport/chttp2/transport/internal.h"
    , "src/core/ext/transport/chttp2/transport/stream_map.h"
    ]
  , "deps":
    [ "chttp2_frame"
    , "chttp2_varint"
    , "debug_location"
    , "exec_ctx"
    , "gpr"
    , "grpc_base"
    , "grpc_public_hdrs"
    , "grpc_trace"
    , "hpack_encoder"
    , "hpack_parser"
    , "hpack_parser_table"
    , "http_trace"
    , "httpcli"
    , "iomgr_timer"
    , "ref_counted_ptr"
    , "stats"
    , ["src/core", "arena"]
    , ["src/core", "bdp_estimator"]
    , ["src/core", "bitset"]
    , ["src/core", "channel_args"]
    , ["src/core", "chttp2_flow_control"]
    , ["src/core", "closure"]
    , ["src/core", "error"]
    , ["src/core", "gpr_atm"]
    , ["src/core", "http2_errors"]
    , ["src/core", "http2_settings"]
    , ["src/core", "init_internally"]
    , ["src/core", "iomgr_fwd"]
    , ["src/core", "memory_quota"]
    , ["src/core", "poll"]
    , ["src/core", "ref_counted"]
    , ["src/core", "resource_quota"]
    , ["src/core", "resource_quota_trace"]
    , ["src/core", "slice"]
    , ["src/core", "slice_buffer"]
    , ["src/core", "slice_refcount"]
    , ["src/core", "stats_data"]
    , ["src/core", "status_helper"]
    , ["src/core", "time"]
    , ["src/core", "transport_fwd"]
    , ["src/core", "useful"]
    , ["@", "absl", "absl/base", "core_headers"]
    , ["@", "absl", "absl/status", "status"]
    , ["@", "absl", "absl/strings", "strings"]
    , ["@", "absl", "absl/strings", "cord"]
    , ["@", "absl", "absl/strings", "str_format"]
    , ["@", "absl", "absl/types", "optional"]
    ]
  }
, "grpcpp_status":
  { "type": ["@", "rules", "CC", "library"]
  , "name": ["grpcpp_status"]
  , "srcs": ["src/cpp/util/status.cc"]
  , "hdrs":
    [ "include/grpcpp/impl/status.h"
    , "include/grpcpp/impl/codegen/status.h"
    , "include/grpcpp/support/status.h"
    , "include/grpc++/impl/codegen/status.h"
    , "include/grpc++/support/status.h"
    ]
  , "deps": ["gpr_platform", "grpc++_public_hdrs", "grpc_public_hdrs"]
  }
, "grpc_cpp_plugin":
  { "type": "export"
  , "target": ["src/compiler", "grpc_cpp_plugin"]
  , "flexible_config":
    [ "OS"
    , "ARCH"
    , "HOST_ARCH"
    , "TARGET_ARCH"
    , "COMPILER_FAMILY"
    , "DEBUG"
    , "CC"
    , "CXX"
    , "CFLAGS"
    , "CXXFLAGS"
    , "ADD_CFLAGS"
    , "ADD_CXXFLAGS"
    , "AR"
    , "ENV"
    ]
  }
}
