{ "rule just provides": {"type": ["simple_rules", "just provide"]}
, "rule provides FOO": {"type": ["simple_rules", "provide variable FOO"]}
, "config transition for FOO":
  { "type": ["simple_rules", "transition FOO"]
  , "value": ["bar", "baz"]
  , "deps": ["rule provides FOO"]
  }
, "collect dep artifacts":
  { "type": ["simple_rules", "collect deps"]
  , "deps": ["bar.txt", "baz.txt", "foo.txt", "link"]
  }
, "collect as runfiles":
  { "type": ["simple_rules", "collect deps as runfiles"]
  , "deps": ["bar.txt", "baz.txt", "foo.txt", "link"]
  }
, "stage blob":
  { "type": ["simple_rules", "text file"]
  , "name": ["foo.txt"]
  , "content": ["This is FOO!"]
  }
, "stage link":
  { "type": ["simple_rules", "symlink"]
  , "name": ["foo.txt"]
  , "content": ["this/is/a/link"]
  }
, "bad absolute link":
  { "type": ["simple_rules", "symlink"]
  , "name": ["foo.txt"]
  , "content": ["/absolute/link"]
  }
, "bad upwards link":
  { "type": ["simple_rules", "symlink"]
  , "name": ["foo.txt"]
  , "content": ["../upwards/link"]
  }
, "use implicit": {"type": ["simple_rules", "implicit file"]}
, "actions":
  {"type": ["simple_rules", "upper case"], "srcs": ["foo.txt", "bar.txt"]}
, "artifact names":
  { "type": ["simple_rules", "text file"]
  , "name": ["index.txt"]
  , "content":
    [ { "type": "join"
      , "separator": ";"
      , "$1": {"type": "outs", "dep": "collect dep artifacts"}
      }
    ]
  , "analyze": ["collect dep artifacts"]
  }
, "runfile names":
  { "type": ["simple_rules", "text file"]
  , "name": ["index.txt"]
  , "content":
    [ { "type": "join"
      , "separator": ";"
      , "$1": {"type": "runfiles", "dep": "collect as runfiles"}
      }
    ]
  , "analyze": ["collect as runfiles"]
  }
, "use generic sym":
  { "type": "generic"
  , "arguments_config": ["TEST_ENV"]
  , "deps": ["bar.txt"]
  , "cmds": ["ln -s $(cat bar.txt) sym"]
  , "outs": ["sym"]
  , "env":
    {"type": "var", "name": "TEST_ENV", "default": {"type": "empty_map"}}
  }
, "use generic":
  { "type": "generic"
  , "arguments_config": ["TEST_ENV"]
  , "deps": ["foo.txt", "link"]
  , "cmds": ["cat foo.txt > out", "readlink link > out", "echo 'DONE' >> out"]
  , "outs": ["out"]
  , "env":
    {"type": "var", "name": "TEST_ENV", "default": {"type": "empty_map"}}
  }
, "install":
  { "type": "install"
  , "deps": ["bar.txt", "foo.txt", "link"]
  , "files":
    { "link_gen": "use generic sym"
    , "combined.txt": "use generic"
    , "subdir/restaged.txt": "bar.txt"
    }
  , "dirs":
    [ ["collect as runfiles", "mix/in/this/subdir"]
    , ["runfile names", "mix/in/this/subdir"]
    ]
  }
, "generate file":
  {"type": "file_gen", "name": "generated.txt", "data": "Hello World!"}
, "generate symlink":
  {"type": "symlink", "name": "generated_link", "data": "dummy_link_target"}
, "ok outs":
  { "type": ["simple_rules", "action"]
  , "cmd": ["sh", "-c", "mkdir foo/bar && echo hello > foo/bar/baz.txt"]
  , "outs": ["foo/bar/baz.txt"]
  }
, "bad outs":
  { "type": ["simple_rules", "action"]
  , "cmd": ["sh", "-c", "echo hello > ../hello.txt"]
  , "outs": ["../hello.txt"]
  }
, "non-normal outs and out_dirs":
  { "type": ["simple_rules", "action"]
  , "cmd":
    [ "sh"
    , "-c"
    , "mkdir -p install && echo Hello > install/data.txt && echo OK > log"
    ]
  , "outs": ["./log"]
  , "out_dirs": ["install/."]
  }
, "generic non-normal outs and out_dirs":
  { "type": "generic"
  , "arguments_config": ["TEST_ENV"]
  , "cmds": ["mkdir -P install", "echo Hello > install/data", "echo OK > log"]
  , "outs": ["./log"]
  , "out_dirs": ["install/."]
  , "env":
    {"type": "var", "name": "TEST_ENV", "default": {"type": "empty_map"}}
  }
, "stage conflict: rule":
  { "type": ["simple_rules", "action"]
  , "cmd": ["sh", "-c", "mkdir -p install && echo Hello > install/data.txt"]
  , "outs": ["./install/data.txt"]
  , "out_dirs": ["install/."]
  }
, "stage conflict: generic":
  { "type": "generic"
  , "arguments_config": ["TEST_ENV"]
  , "cmds": ["mkdir -p install && echo Hello > install/data.txt"]
  , "outs": ["./install/data.txt"]
  , "out_dirs": ["install/."]
  , "env":
    {"type": "var", "name": "TEST_ENV", "default": {"type": "empty_map"}}
  }
}
