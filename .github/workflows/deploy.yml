name: Bootstrap and Deploy

on:
  push:
    branches:
      - github-ci

jobs:
  linux-x86_64:
    name: Linux x86_64
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    steps:
      - name: Restore local cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.cache/just
          key: deploy-${{ runner.os }}-x86_64

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Read commit info
        run: |
          git fetch https://github.com/just-buildsystem/justbuild master
          BASE_COMMIT="$(git merge-base ${GITHUB_REF_NAME} FETCH_HEAD)"
          COMMIT_TIME="$(git log -n1 ${BASE_COMMIT} --format=%ct)"
          echo "COMMIT_TIME=${COMMIT_TIME}" >> $GITHUB_ENV

      - name: Run and prepare docker image
        run: |
          docker run -it -d --name ubuntu \
            -v $GITHUB_WORKSPACE:/workspace \
            -v ~/.cache/just:/root/.cache/just \
            -w /workspace ubuntu:20.04
          docker exec ubuntu bash -c "\
            set -e; \
            apt update; \
            apt install --yes git wget python3 clang libstdc++-10-dev unzip patch; \
            git config --global --add safe.directory /workspace; \
            git config --global --add safe.directory /root/.cache/just/git"

      - name: Bootstrap just for x86_64
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            export JUST_BUILD_CONF='{\"SOURCE_DATE_EPOCH\":'${COMMIT_TIME}'}'; \
            ./bin/bootstrap.py . /tmp/justbuild_x86_64"

      - name: Build just-mr for x86_64
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            export PATH=/tmp/justbuild_x86_64/out/bin:\$PATH; \
            echo '{\"SOURCE_DATE_EPOCH\":'${COMMIT_TIME}'}' > build.conf; \
            ./bin/just-mr.py install -c build.conf -o /tmp/justbuild_x86_64/out/ 'installed just-mr'"

      - name: Collect x86_64 Linux binaries
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            mkdir -p justbuild-x86_64-linux/bin; \
            cp /tmp/justbuild_x86_64/out/bin/{just,just-mr} justbuild-x86_64-linux/bin/"
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 1970-01-01' -czvf justbuild-x86_64-linux.tar.gz justbuild-x86_64-linux

      - name: Upload x86_64 Linux binaries
        uses: actions/upload-artifact@v3
        with:
          name: justbuild-x86_64-linux
          path: justbuild-x86_64-linux.tar.gz
          retention-days: 1

      - name: Run garbage collector and clean cache
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            export PATH=/tmp/justbuild_x86_64/out/bin:\$PATH; \
            just gc"
          gh extension install actions/gh-actions-cache
          if [ -n "$(gh actions-cache list -R ${GITHUB_REPOSITORY} -B ${GITHUB_REF} --key 'deploy-${{ runner.os }}-x86_64')" ]; then
            gh actions-cache delete "deploy-${{ runner.os }}-x86_64" -R ${GITHUB_REPOSITORY} -B ${GITHUB_REF} --confirm
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store local cache
        uses: actions/cache/save@v3
        if: ${{ !cancelled() }}
        with:
          path: ~/.cache/just
          key: deploy-${{ runner.os }}-x86_64

  linux-arm64:
    name: Linux arm64
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    needs: linux-x86_64
    steps:
      - name: Restore local cache
        uses: actions/cache/restore@v3
        with:
          path: ~/.cache/just
          key: deploy-${{ runner.os }}-arm64

      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve x86_64 Linux binaries
        uses: actions/download-artifact@v3
        with:
          name: justbuild-x86_64-linux

      - name: Unpack x86_64 Linux binaries
        run: |
          tar -xzvf justbuild-x86_64-linux.tar.gz

      - name: Read commit info
        run: |
          git fetch https://github.com/just-buildsystem/justbuild master
          BASE_COMMIT="$(git merge-base ${GITHUB_REF_NAME} FETCH_HEAD)"
          COMMIT_TIME="$(git log -n1 ${BASE_COMMIT} --format=%ct)"
          echo "COMMIT_TIME=${COMMIT_TIME}" >> $GITHUB_ENV

      - name: Run and prepare docker image
        run: |
          docker run -it -d --name ubuntu \
            -v $GITHUB_WORKSPACE:/workspace \
            -v ~/.cache/just:/root/.cache/just \
            -w /workspace ubuntu:20.04
          docker exec ubuntu bash -c "\
            set -e; \
            apt update; \
            apt install --yes git g++-10 g++-10-aarch64-linux-gnu patch; \
            update-alternatives --install /usr/bin/x86_64-linux-gnu-gcc x86_64-linux-gnu-gcc /usr/bin/x86_64-linux-gnu-gcc-10 30; \
            update-alternatives --install /usr/bin/x86_64-linux-gnu-g++ x86_64-linux-gnu-g++ /usr/bin/x86_64-linux-gnu-g++-10 30; \
            update-alternatives --install /usr/bin/aarch64-linux-gnu-gcc aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-10 30; \
            update-alternatives --install /usr/bin/aarch64-linux-gnu-g++ aarch64-linux-gnu-g++ /usr/bin/aarch64-linux-gnu-g++-10 30; \
            git config --global --add safe.directory /workspace; \
            git config --global --add safe.directory /root/.cache/just/git"

      - name: Build just for arm64
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            echo '{\"COMPILER_FAMILY\":\"gnu\",\"ARCH\":\"x86_64\",\"TARGET_ARCH\":\"arm64\",\"SOURCE_DATE_EPOCH\":'${COMMIT_TIME}'}' > gcc-arm64.conf; \
            export PATH=\$(pwd)/justbuild-x86_64-linux/bin:\$PATH; \
            just-mr install -c gcc-arm64.conf -o justbuild-arm64-linux 'installed just'"

      - name: Build just-mr for arm64
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            echo '{\"COMPILER_FAMILY\":\"gnu\",\"ARCH\":\"x86_64\",\"TARGET_ARCH\":\"arm64\",\"SOURCE_DATE_EPOCH\":'${COMMIT_TIME}'}' > gcc-arm64.conf; \
            export PATH=\$(pwd)/justbuild-x86_64-linux/bin:\$PATH; \
            just-mr install -c gcc-arm64.conf -o justbuild-arm64-linux 'installed just-mr'"

      - name: Collect arm64 Linux binaries
        run: |
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 1970-01-01' -czvf justbuild-arm64-linux.tar.gz justbuild-arm64-linux

      - name: Upload arm64 Linux binaries
        uses: actions/upload-artifact@v3
        with:
          name: justbuild-arm64-linux
          path: justbuild-arm64-linux.tar.gz
          retention-days: 1

      - name: Run garbage collector and clean cache
        run: |
          docker exec ubuntu bash -c "\
            set -e; \
            export PATH=\$(pwd)/justbuild-x86_64-linux/bin:\$PATH; \
            just gc"
          gh extension install actions/gh-actions-cache
          if [ -n "$(gh actions-cache list -R ${GITHUB_REPOSITORY} -B ${GITHUB_REF} --key 'deploy-${{ runner.os }}-arm64')" ]; then
            gh actions-cache delete "deploy-${{ runner.os }}-arm64" -R ${GITHUB_REPOSITORY} -B ${GITHUB_REF} --confirm
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store local cache
        uses: actions/cache/save@v3
        if: ${{ !cancelled() }}
        with:
          path: ~/.cache/just
          key: deploy-${{ runner.os }}-arm64

  linux-noarch:
    name: Linux noarch
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run and prepare docker image
        run: |
          docker run -it -d --name ubuntu -v $GITHUB_WORKSPACE:/workspace -w /workspace ubuntu:20.04
          docker exec ubuntu bash -c "\
            set -e; \
            apt update; \
            apt install --yes pandoc"

      - name: Build man pages
        run: |
          mkdir -p justbuild-noarch-linux/share/man/man{1,5}
          docker exec ubuntu bash -c "\
            set -e; \
            pandoc -s -t man ./share/man/just.1.org -o justbuild-noarch-linux/share/man/man1/just.1; \
            pandoc -s -t man ./share/man/just-mr.1.org -o justbuild-noarch-linux/share/man/man1/just-mr.1; \
            pandoc -s -t man ./share/man/just-import-git.1.org -o justbuild-noarch-linux/share/man/man1/just-import-git.1; \
            pandoc -s -t man ./share/man/just-mrrc.5.org -o justbuild-noarch-linux/share/man/man5/just-mrrc.5; \
            pandoc -s -t man ./share/man/just-graph-file.5.org -o justbuild-noarch-linux/share/man/man5/just-graph-file.5; \
            pandoc -s -t man ./share/man/just-repository-config.5.org -o justbuild-noarch-linux/share/man/man5/just-repository-config.5; \
            pandoc -s -t man ./share/man/just-mr-repository-config.5.org -o justbuild-noarch-linux/share/man/man5/just-mr-repository-config.5"

      - name: Collect noarch Linux files
        run: |
          mkdir -p justbuild-noarch-linux/{bin,etc/bash_completion.d}
          cp ./bin/just-import-git.py justbuild-noarch-linux/bin/just-import-git
          cp ./share/just_complete.bash justbuild-noarch-linux/etc/bash_completion.d/just
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 1970-01-01' -czvf justbuild-noarch-linux.tar.gz justbuild-noarch-linux

      - name: Upload noarch Linux files
        uses: actions/upload-artifact@v3
        with:
          name: justbuild-noarch-linux
          path: justbuild-noarch-linux.tar.gz
          retention-days: 1

  deb-package:
    name: Debian Package
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build Debian package
        run: |
          git fetch https://github.com/just-buildsystem/justbuild master
          BASE_COMMIT="$(git merge-base ${GITHUB_REF_NAME} FETCH_HEAD)"
          .github/make-pkg/docker-build.sh ${BASE_COMMIT} static-deb
          cp ./work_static-deb/justbuild_*.deb .

      - name: Upload Debian package
        uses: actions/upload-artifact@v3
        with:
          name: justbuild-deb-package
          path: justbuild_*.deb
          retention-days: 1

  rpm-package:
    name: RPM Package
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build RPM package
        run: |
          git fetch https://github.com/just-buildsystem/justbuild master
          BASE_COMMIT="$(git merge-base ${GITHUB_REF_NAME} FETCH_HEAD)"
          .github/make-pkg/docker-build.sh ${BASE_COMMIT} static-rpm
          cp ./work_static-rpm/rpmbuild/RPMS/x86_64/justbuild-*.rpm .

      - name: Upload RPM package
        uses: actions/upload-artifact@v3
        with:
          name: justbuild-rpm-package
          path: justbuild-*.rpm
          retention-days: 1

  deploy-packages:
    name: Deploy Packages
    if: "!contains(github.event.head_commit.message, '[skip-ci]')"
    runs-on: ubuntu-22.04
    needs: [linux-x86_64, linux-arm64, linux-noarch, deb-package, rpm-package]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Retrieve x86_64 Linux binaries
        uses: actions/download-artifact@v3
        with:
          name: justbuild-x86_64-linux

      - name: Retrieve arm64 Linux binaries
        uses: actions/download-artifact@v3
        with:
          name: justbuild-arm64-linux

      - name: Retrieve noarch Linux files
        uses: actions/download-artifact@v3
        with:
          name: justbuild-noarch-linux

      - name: Retrieve Debian package
        uses: actions/download-artifact@v3
        with:
          name: justbuild-deb-package

      - name: Retrieve RPM package
        uses: actions/download-artifact@v3
        with:
          name: justbuild-rpm-package

      - name: Unpack retrieved archives
        run: |
          tar -xzvf justbuild-x86_64-linux.tar.gz
          tar -xzvf justbuild-arm64-linux.tar.gz
          tar -xzvf justbuild-noarch-linux.tar.gz
          rm -f *.tar.gz

      - name: Determine package name
        run: |
          git fetch https://github.com/just-buildsystem/justbuild master
          BASE_COMMIT="$(git merge-base ${GITHUB_REF_NAME} FETCH_HEAD)"
          VERSION="$(.github/just-version.sh ${BASE_COMMIT})"
          UNTAGGED=$([[ "$VERSION" = *+* ]] && echo true || echo false)
          TAG_NAME="v$(echo $VERSION | tr '~+' '-')"
          echo "UNTAGGED=${UNTAGGED}" >> $GITHUB_ENV
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_ENV
          echo "PKG_NAME=justbuild-${VERSION}" >> $GITHUB_ENV

      - name: Create packages and checksums
        run: |
          mkdir -p $PKG_NAME-{x86_64,aarch64}-linux
          cp -r justbuild-{x86_64,noarch}-linux/* $PKG_NAME-x86_64-linux/.
          cp -r justbuild-{arm64,noarch}-linux/* $PKG_NAME-aarch64-linux/.
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 1970-01-01' -czvf $PKG_NAME-x86_64-linux.tar.gz $PKG_NAME-x86_64-linux
          tar --sort=name --owner=root:0 --group=root:0 --mtime='UTC 1970-01-01' -czvf $PKG_NAME-aarch64-linux.tar.gz $PKG_NAME-aarch64-linux
          sha256sum $PKG_NAME-*.tar.gz *.deb *.rpm | tee SHA256SUMS

      - name: Upload package checksums
        uses: actions/upload-artifact@v3
        with:
          name: SHA256SUMS
          path: SHA256SUMS
          if-no-files-found: error

      - name: Upload package release
        uses: xresloader/upload-to-github-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          file: "*.tar.gz;*.deb;*.rpm;SHA256SUMS"
          tag_name: ${{ env.TAG_NAME }}
          prerelease: ${{ env.UNTAGGED }}
          tags: false
          draft: false
          overwrite: true
